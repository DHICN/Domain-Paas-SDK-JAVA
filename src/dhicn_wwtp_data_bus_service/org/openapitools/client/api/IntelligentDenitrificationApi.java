/*
 * 污水业务中台领域服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AbftProcessStatusOutput;
import org.openapitools.client.model.AssemblyConfigOutput;
import org.openapitools.client.model.CdAdditionRateOutput;
import org.openapitools.client.model.DosingLogOutput;
import org.openapitools.client.model.DosingParamSettingDto;
import org.openapitools.client.model.DosingParameterOutput;
import org.openapitools.client.model.DosingStatisticDailysOutput;
import org.openapitools.client.model.InletLoadOutput;
import org.openapitools.client.model.OutletTnOutput;
import org.openapitools.client.model.RemoteServiceErrorResponse;
import org.openapitools.client.model.SingleCodeDatasOutput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IntelligentDenitrificationApi {
    private ApiClient localVarApiClient;

    public IntelligentDenitrificationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IntelligentDenitrificationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for apiIntelligentDenitrificationDownloadDosingLogGet
     * @param category 加药类型 dosage type (optional)
     * @param productionLine 产线代码 product line code (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param downloadKey 下载key download key (optional)
     * @param tenantId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiIntelligentDenitrificationDownloadDosingLogGetCall(Integer category, String productionLine, String startTime, String endTime, String downloadKey, String tenantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/IntelligentDenitrification/DownloadDosingLog";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (productionLine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productionLine", productionLine));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (downloadKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("downloadKey", downloadKey));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiIntelligentDenitrificationDownloadDosingLogGetValidateBeforeCall(Integer category, String productionLine, String startTime, String endTime, String downloadKey, String tenantId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiIntelligentDenitrificationDownloadDosingLogGetCall(category, productionLine, startTime, endTime, downloadKey, tenantId, _callback);
        return localVarCall;

    }

    /**
     * 指定时间段内加药报表文件导出 Export dosing logs of a certain period as an excel file
     * 
     * @param category 加药类型 dosage type (optional)
     * @param productionLine 产线代码 product line code (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param downloadKey 下载key download key (optional)
     * @param tenantId  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void apiIntelligentDenitrificationDownloadDosingLogGet(Integer category, String productionLine, String startTime, String endTime, String downloadKey, String tenantId) throws ApiException {
        apiIntelligentDenitrificationDownloadDosingLogGetWithHttpInfo(category, productionLine, startTime, endTime, downloadKey, tenantId);
    }

    /**
     * 指定时间段内加药报表文件导出 Export dosing logs of a certain period as an excel file
     * 
     * @param category 加药类型 dosage type (optional)
     * @param productionLine 产线代码 product line code (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param downloadKey 下载key download key (optional)
     * @param tenantId  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<Void>> apiIntelligentDenitrificationDownloadDosingLogGetWithHttpInfo(Integer category, String productionLine, String startTime, String endTime, String downloadKey, String tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiIntelligentDenitrificationDownloadDosingLogGetValidateBeforeCall(category, productionLine, startTime, endTime, downloadKey, tenantId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * 指定时间段内加药报表文件导出 Export dosing logs of a certain period as an excel file (asynchronously)
     * 
     * @param category 加药类型 dosage type (optional)
     * @param productionLine 产线代码 product line code (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param downloadKey 下载key download key (optional)
     * @param tenantId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiIntelligentDenitrificationDownloadDosingLogGetAsync(Integer category, String productionLine, String startTime, String endTime, String downloadKey, String tenantId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiIntelligentDenitrificationDownloadDosingLogGetValidateBeforeCall(category, productionLine, startTime, endTime, downloadKey, tenantId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiIntelligentDenitrificationDownloadDosingStatisticDailyGet
     * @param category 加药类型 dosage type (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param downloadKey 下载key download key (optional)
     * @param tenantId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiIntelligentDenitrificationDownloadDosingStatisticDailyGetCall(Integer category, String startTime, String endTime, String downloadKey, String tenantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/IntelligentDenitrification/DownloadDosingStatisticDaily";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (downloadKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("downloadKey", downloadKey));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiIntelligentDenitrificationDownloadDosingStatisticDailyGetValidateBeforeCall(Integer category, String startTime, String endTime, String downloadKey, String tenantId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiIntelligentDenitrificationDownloadDosingStatisticDailyGetCall(category, startTime, endTime, downloadKey, tenantId, _callback);
        return localVarCall;

    }

    /**
     * 指定时间段内加药统计文件导出 Export dosing daily statistic results of a certain period as an excel file
     * 
     * @param category 加药类型 dosage type (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param downloadKey 下载key download key (optional)
     * @param tenantId  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void apiIntelligentDenitrificationDownloadDosingStatisticDailyGet(Integer category, String startTime, String endTime, String downloadKey, String tenantId) throws ApiException {
        apiIntelligentDenitrificationDownloadDosingStatisticDailyGetWithHttpInfo(category, startTime, endTime, downloadKey, tenantId);
    }

    /**
     * 指定时间段内加药统计文件导出 Export dosing daily statistic results of a certain period as an excel file
     * 
     * @param category 加药类型 dosage type (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param downloadKey 下载key download key (optional)
     * @param tenantId  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<Void>> apiIntelligentDenitrificationDownloadDosingStatisticDailyGetWithHttpInfo(Integer category, String startTime, String endTime, String downloadKey, String tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiIntelligentDenitrificationDownloadDosingStatisticDailyGetValidateBeforeCall(category, startTime, endTime, downloadKey, tenantId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * 指定时间段内加药统计文件导出 Export dosing daily statistic results of a certain period as an excel file (asynchronously)
     * 
     * @param category 加药类型 dosage type (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param downloadKey 下载key download key (optional)
     * @param tenantId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiIntelligentDenitrificationDownloadDosingStatisticDailyGetAsync(Integer category, String startTime, String endTime, String downloadKey, String tenantId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiIntelligentDenitrificationDownloadDosingStatisticDailyGetValidateBeforeCall(category, startTime, endTime, downloadKey, tenantId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiIntelligentDenitrificationGetABFTProcessStatusGet
     * @param productionLine 产线编号 product line code (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiIntelligentDenitrificationGetABFTProcessStatusGetCall(String productionLine, String startTime, String endTime, String tenantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/IntelligentDenitrification/GetABFTProcessStatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (productionLine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productionLine", productionLine));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiIntelligentDenitrificationGetABFTProcessStatusGetValidateBeforeCall(String productionLine, String startTime, String endTime, String tenantId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiIntelligentDenitrificationGetABFTProcessStatusGetCall(productionLine, startTime, endTime, tenantId, _callback);
        return localVarCall;

    }

    /**
     * 获取生化池工艺运行状态 Get biochemical pool operation status
     * 
     * @param productionLine 产线编号 product line code (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @return List&lt;AbftProcessStatusOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResult<List<AbftProcessStatusOutput>>apiIntelligentDenitrificationGetABFTProcessStatusGet(String productionLine, String startTime, String endTime, String tenantId) throws ApiException {
        ApiResponse<ApiResult<List<AbftProcessStatusOutput>>> localVarResp = apiIntelligentDenitrificationGetABFTProcessStatusGetWithHttpInfo(productionLine, startTime, endTime, tenantId);
        return localVarResp.getData();
    }

    /**
     * 获取生化池工艺运行状态 Get biochemical pool operation status
     * 
     * @param productionLine 产线编号 product line code (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @return ApiResponse&lt;List&lt;AbftProcessStatusOutput&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<List<AbftProcessStatusOutput>>> apiIntelligentDenitrificationGetABFTProcessStatusGetWithHttpInfo(String productionLine, String startTime, String endTime, String tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiIntelligentDenitrificationGetABFTProcessStatusGetValidateBeforeCall(productionLine, startTime, endTime, tenantId, null);
        Type localVarReturnType = new TypeToken<ApiResult<List<AbftProcessStatusOutput>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取生化池工艺运行状态 Get biochemical pool operation status (asynchronously)
     * 
     * @param productionLine 产线编号 product line code (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiIntelligentDenitrificationGetABFTProcessStatusGetAsync(String productionLine, String startTime, String endTime, String tenantId, final ApiCallback<List<AbftProcessStatusOutput>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiIntelligentDenitrificationGetABFTProcessStatusGetValidateBeforeCall(productionLine, startTime, endTime, tenantId, _callback);
        Type localVarReturnType = new TypeToken<List<AbftProcessStatusOutput>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiIntelligentDenitrificationGetAnoxicNO3Get
     * @param productionLine 产线编号 product line code (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiIntelligentDenitrificationGetAnoxicNO3GetCall(String productionLine, String startTime, String endTime, String tenantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/IntelligentDenitrification/GetAnoxicNO3";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (productionLine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productionLine", productionLine));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiIntelligentDenitrificationGetAnoxicNO3GetValidateBeforeCall(String productionLine, String startTime, String endTime, String tenantId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiIntelligentDenitrificationGetAnoxicNO3GetCall(productionLine, startTime, endTime, tenantId, _callback);
        return localVarCall;

    }

    /**
     * 获取缺氧区出水硝酸盐 Get anoxic zone effluent nitrate concentration
     * 
     * @param productionLine 产线编号 product line code (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @return SingleCodeDatasOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResult<SingleCodeDatasOutput>apiIntelligentDenitrificationGetAnoxicNO3Get(String productionLine, String startTime, String endTime, String tenantId) throws ApiException {
        ApiResponse<ApiResult<SingleCodeDatasOutput>> localVarResp = apiIntelligentDenitrificationGetAnoxicNO3GetWithHttpInfo(productionLine, startTime, endTime, tenantId);
        return localVarResp.getData();
    }

    /**
     * 获取缺氧区出水硝酸盐 Get anoxic zone effluent nitrate concentration
     * 
     * @param productionLine 产线编号 product line code (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @return ApiResponse&lt;SingleCodeDatasOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<SingleCodeDatasOutput>> apiIntelligentDenitrificationGetAnoxicNO3GetWithHttpInfo(String productionLine, String startTime, String endTime, String tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiIntelligentDenitrificationGetAnoxicNO3GetValidateBeforeCall(productionLine, startTime, endTime, tenantId, null);
        Type localVarReturnType = new TypeToken<ApiResult<SingleCodeDatasOutput>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取缺氧区出水硝酸盐 Get anoxic zone effluent nitrate concentration (asynchronously)
     * 
     * @param productionLine 产线编号 product line code (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiIntelligentDenitrificationGetAnoxicNO3GetAsync(String productionLine, String startTime, String endTime, String tenantId, final ApiCallback<SingleCodeDatasOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiIntelligentDenitrificationGetAnoxicNO3GetValidateBeforeCall(productionLine, startTime, endTime, tenantId, _callback);
        Type localVarReturnType = new TypeToken<SingleCodeDatasOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiIntelligentDenitrificationGetAssemblyConfigsGet
     * @param displayTypeEnum 展示枚举 (optional)
     * @param productLine 产线 (optional)
     * @param tenantId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiIntelligentDenitrificationGetAssemblyConfigsGetCall(Integer displayTypeEnum, String productLine, String tenantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/IntelligentDenitrification/GetAssemblyConfigs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (displayTypeEnum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("displayTypeEnum", displayTypeEnum));
        }

        if (productLine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productLine", productLine));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiIntelligentDenitrificationGetAssemblyConfigsGetValidateBeforeCall(Integer displayTypeEnum, String productLine, String tenantId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiIntelligentDenitrificationGetAssemblyConfigsGetCall(displayTypeEnum, productLine, tenantId, _callback);
        return localVarCall;

    }

    /**
     * 根据展示类别获取点位配置信息
     * 根据展示类别获取点位配置信息
     * @param displayTypeEnum 展示枚举 (optional)
     * @param productLine 产线 (optional)
     * @param tenantId  (optional)
     * @return List&lt;AssemblyConfigOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResult<List<AssemblyConfigOutput>>apiIntelligentDenitrificationGetAssemblyConfigsGet(Integer displayTypeEnum, String productLine, String tenantId) throws ApiException {
        ApiResponse<ApiResult<List<AssemblyConfigOutput>>> localVarResp = apiIntelligentDenitrificationGetAssemblyConfigsGetWithHttpInfo(displayTypeEnum, productLine, tenantId);
        return localVarResp.getData();
    }

    /**
     * 根据展示类别获取点位配置信息
     * 根据展示类别获取点位配置信息
     * @param displayTypeEnum 展示枚举 (optional)
     * @param productLine 产线 (optional)
     * @param tenantId  (optional)
     * @return ApiResponse&lt;List&lt;AssemblyConfigOutput&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<List<AssemblyConfigOutput>>> apiIntelligentDenitrificationGetAssemblyConfigsGetWithHttpInfo(Integer displayTypeEnum, String productLine, String tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiIntelligentDenitrificationGetAssemblyConfigsGetValidateBeforeCall(displayTypeEnum, productLine, tenantId, null);
        Type localVarReturnType = new TypeToken<ApiResult<List<AssemblyConfigOutput>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据展示类别获取点位配置信息 (asynchronously)
     * 根据展示类别获取点位配置信息
     * @param displayTypeEnum 展示枚举 (optional)
     * @param productLine 产线 (optional)
     * @param tenantId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiIntelligentDenitrificationGetAssemblyConfigsGetAsync(Integer displayTypeEnum, String productLine, String tenantId, final ApiCallback<List<AssemblyConfigOutput>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiIntelligentDenitrificationGetAssemblyConfigsGetValidateBeforeCall(displayTypeEnum, productLine, tenantId, _callback);
        Type localVarReturnType = new TypeToken<List<AssemblyConfigOutput>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiIntelligentDenitrificationGetCDAdditionRateGet
     * @param productionLine 产线编号 product line code (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiIntelligentDenitrificationGetCDAdditionRateGetCall(String productionLine, String startTime, String endTime, String tenantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/IntelligentDenitrification/GetCDAdditionRate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (productionLine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productionLine", productionLine));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiIntelligentDenitrificationGetCDAdditionRateGetValidateBeforeCall(String productionLine, String startTime, String endTime, String tenantId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiIntelligentDenitrificationGetCDAdditionRateGetCall(productionLine, startTime, endTime, tenantId, _callback);
        return localVarCall;

    }

    /**
     * 获取碳源投加速率 Get carbon source dosing rate data
     * 
     * @param productionLine 产线编号 product line code (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @return CdAdditionRateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResult<CdAdditionRateOutput>apiIntelligentDenitrificationGetCDAdditionRateGet(String productionLine, String startTime, String endTime, String tenantId) throws ApiException {
        ApiResponse<ApiResult<CdAdditionRateOutput>> localVarResp = apiIntelligentDenitrificationGetCDAdditionRateGetWithHttpInfo(productionLine, startTime, endTime, tenantId);
        return localVarResp.getData();
    }

    /**
     * 获取碳源投加速率 Get carbon source dosing rate data
     * 
     * @param productionLine 产线编号 product line code (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @return ApiResponse&lt;CdAdditionRateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<CdAdditionRateOutput>> apiIntelligentDenitrificationGetCDAdditionRateGetWithHttpInfo(String productionLine, String startTime, String endTime, String tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiIntelligentDenitrificationGetCDAdditionRateGetValidateBeforeCall(productionLine, startTime, endTime, tenantId, null);
        Type localVarReturnType = new TypeToken<ApiResult<CdAdditionRateOutput>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取碳源投加速率 Get carbon source dosing rate data (asynchronously)
     * 
     * @param productionLine 产线编号 product line code (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiIntelligentDenitrificationGetCDAdditionRateGetAsync(String productionLine, String startTime, String endTime, String tenantId, final ApiCallback<CdAdditionRateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiIntelligentDenitrificationGetCDAdditionRateGetValidateBeforeCall(productionLine, startTime, endTime, tenantId, _callback);
        Type localVarReturnType = new TypeToken<CdAdditionRateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiIntelligentDenitrificationGetDenitrificationRateGet
     * @param productionLine 产线编号 product line code (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiIntelligentDenitrificationGetDenitrificationRateGetCall(String productionLine, String startTime, String endTime, String tenantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/IntelligentDenitrification/GetDenitrificationRate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (productionLine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productionLine", productionLine));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiIntelligentDenitrificationGetDenitrificationRateGetValidateBeforeCall(String productionLine, String startTime, String endTime, String tenantId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiIntelligentDenitrificationGetDenitrificationRateGetCall(productionLine, startTime, endTime, tenantId, _callback);
        return localVarCall;

    }

    /**
     * 获取反硝化速率 Get denitrification rate data
     * 
     * @param productionLine 产线编号 product line code (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @return SingleCodeDatasOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResult<SingleCodeDatasOutput>apiIntelligentDenitrificationGetDenitrificationRateGet(String productionLine, String startTime, String endTime, String tenantId) throws ApiException {
        ApiResponse<ApiResult<SingleCodeDatasOutput>> localVarResp = apiIntelligentDenitrificationGetDenitrificationRateGetWithHttpInfo(productionLine, startTime, endTime, tenantId);
        return localVarResp.getData();
    }

    /**
     * 获取反硝化速率 Get denitrification rate data
     * 
     * @param productionLine 产线编号 product line code (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @return ApiResponse&lt;SingleCodeDatasOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<SingleCodeDatasOutput>> apiIntelligentDenitrificationGetDenitrificationRateGetWithHttpInfo(String productionLine, String startTime, String endTime, String tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiIntelligentDenitrificationGetDenitrificationRateGetValidateBeforeCall(productionLine, startTime, endTime, tenantId, null);
        Type localVarReturnType = new TypeToken<ApiResult<SingleCodeDatasOutput>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取反硝化速率 Get denitrification rate data (asynchronously)
     * 
     * @param productionLine 产线编号 product line code (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiIntelligentDenitrificationGetDenitrificationRateGetAsync(String productionLine, String startTime, String endTime, String tenantId, final ApiCallback<SingleCodeDatasOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiIntelligentDenitrificationGetDenitrificationRateGetValidateBeforeCall(productionLine, startTime, endTime, tenantId, _callback);
        Type localVarReturnType = new TypeToken<SingleCodeDatasOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiIntelligentDenitrificationGetDosingLogGet
     * @param category 加药类型 dosage type (optional)
     * @param productionLine 产线代码 product line code (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiIntelligentDenitrificationGetDosingLogGetCall(Integer category, String productionLine, String startTime, String endTime, String tenantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/IntelligentDenitrification/GetDosingLog";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (productionLine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productionLine", productionLine));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiIntelligentDenitrificationGetDosingLogGetValidateBeforeCall(Integer category, String productionLine, String startTime, String endTime, String tenantId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiIntelligentDenitrificationGetDosingLogGetCall(category, productionLine, startTime, endTime, tenantId, _callback);
        return localVarCall;

    }

    /**
     * 获取指定时间段内的加药报表 Get dosing logs of a certain period
     * 
     * @param category 加药类型 dosage type (optional)
     * @param productionLine 产线代码 product line code (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @return DosingLogOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResult<DosingLogOutput>apiIntelligentDenitrificationGetDosingLogGet(Integer category, String productionLine, String startTime, String endTime, String tenantId) throws ApiException {
        ApiResponse<ApiResult<DosingLogOutput>> localVarResp = apiIntelligentDenitrificationGetDosingLogGetWithHttpInfo(category, productionLine, startTime, endTime, tenantId);
        return localVarResp.getData();
    }

    /**
     * 获取指定时间段内的加药报表 Get dosing logs of a certain period
     * 
     * @param category 加药类型 dosage type (optional)
     * @param productionLine 产线代码 product line code (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @return ApiResponse&lt;DosingLogOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<DosingLogOutput>> apiIntelligentDenitrificationGetDosingLogGetWithHttpInfo(Integer category, String productionLine, String startTime, String endTime, String tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiIntelligentDenitrificationGetDosingLogGetValidateBeforeCall(category, productionLine, startTime, endTime, tenantId, null);
        Type localVarReturnType = new TypeToken<ApiResult<DosingLogOutput>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取指定时间段内的加药报表 Get dosing logs of a certain period (asynchronously)
     * 
     * @param category 加药类型 dosage type (optional)
     * @param productionLine 产线代码 product line code (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiIntelligentDenitrificationGetDosingLogGetAsync(Integer category, String productionLine, String startTime, String endTime, String tenantId, final ApiCallback<DosingLogOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiIntelligentDenitrificationGetDosingLogGetValidateBeforeCall(category, productionLine, startTime, endTime, tenantId, _callback);
        Type localVarReturnType = new TypeToken<DosingLogOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiIntelligentDenitrificationGetDosingParameterGet
     * @param category 加药类别 dosage type (optional)
     * @param productionLineCode 产线编号 product line code (optional)
     * @param tenantId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiIntelligentDenitrificationGetDosingParameterGetCall(Integer category, String productionLineCode, String tenantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/IntelligentDenitrification/GetDosingParameter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (productionLineCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productionLineCode", productionLineCode));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiIntelligentDenitrificationGetDosingParameterGetValidateBeforeCall(Integer category, String productionLineCode, String tenantId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiIntelligentDenitrificationGetDosingParameterGetCall(category, productionLineCode, tenantId, _callback);
        return localVarCall;

    }

    /**
     * 获取加药参数 Get dosing paramters
     * 
     * @param category 加药类别 dosage type (optional)
     * @param productionLineCode 产线编号 product line code (optional)
     * @param tenantId  (optional)
     * @return List&lt;DosingParameterOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResult<List<DosingParameterOutput>>apiIntelligentDenitrificationGetDosingParameterGet(Integer category, String productionLineCode, String tenantId) throws ApiException {
        ApiResponse<ApiResult<List<DosingParameterOutput>>> localVarResp = apiIntelligentDenitrificationGetDosingParameterGetWithHttpInfo(category, productionLineCode, tenantId);
        return localVarResp.getData();
    }

    /**
     * 获取加药参数 Get dosing paramters
     * 
     * @param category 加药类别 dosage type (optional)
     * @param productionLineCode 产线编号 product line code (optional)
     * @param tenantId  (optional)
     * @return ApiResponse&lt;List&lt;DosingParameterOutput&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<List<DosingParameterOutput>>> apiIntelligentDenitrificationGetDosingParameterGetWithHttpInfo(Integer category, String productionLineCode, String tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiIntelligentDenitrificationGetDosingParameterGetValidateBeforeCall(category, productionLineCode, tenantId, null);
        Type localVarReturnType = new TypeToken<ApiResult<List<DosingParameterOutput>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取加药参数 Get dosing paramters (asynchronously)
     * 
     * @param category 加药类别 dosage type (optional)
     * @param productionLineCode 产线编号 product line code (optional)
     * @param tenantId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiIntelligentDenitrificationGetDosingParameterGetAsync(Integer category, String productionLineCode, String tenantId, final ApiCallback<List<DosingParameterOutput>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiIntelligentDenitrificationGetDosingParameterGetValidateBeforeCall(category, productionLineCode, tenantId, _callback);
        Type localVarReturnType = new TypeToken<List<DosingParameterOutput>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiIntelligentDenitrificationGetDosingStatisticDailysGet
     * @param category 加药类型 dosage type (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiIntelligentDenitrificationGetDosingStatisticDailysGetCall(Integer category, String startTime, String endTime, String tenantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/IntelligentDenitrification/GetDosingStatisticDailys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiIntelligentDenitrificationGetDosingStatisticDailysGetValidateBeforeCall(Integer category, String startTime, String endTime, String tenantId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiIntelligentDenitrificationGetDosingStatisticDailysGetCall(category, startTime, endTime, tenantId, _callback);
        return localVarCall;

    }

    /**
     * 指定时间段内加药统计查询 Get dosing daily statistic results of a certain period
     * 
     * @param category 加药类型 dosage type (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @return List&lt;DosingStatisticDailysOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResult<List<DosingStatisticDailysOutput>>apiIntelligentDenitrificationGetDosingStatisticDailysGet(Integer category, String startTime, String endTime, String tenantId) throws ApiException {
        ApiResponse<ApiResult<List<DosingStatisticDailysOutput>>> localVarResp = apiIntelligentDenitrificationGetDosingStatisticDailysGetWithHttpInfo(category, startTime, endTime, tenantId);
        return localVarResp.getData();
    }

    /**
     * 指定时间段内加药统计查询 Get dosing daily statistic results of a certain period
     * 
     * @param category 加药类型 dosage type (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @return ApiResponse&lt;List&lt;DosingStatisticDailysOutput&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<List<DosingStatisticDailysOutput>>> apiIntelligentDenitrificationGetDosingStatisticDailysGetWithHttpInfo(Integer category, String startTime, String endTime, String tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiIntelligentDenitrificationGetDosingStatisticDailysGetValidateBeforeCall(category, startTime, endTime, tenantId, null);
        Type localVarReturnType = new TypeToken<ApiResult<List<DosingStatisticDailysOutput>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 指定时间段内加药统计查询 Get dosing daily statistic results of a certain period (asynchronously)
     * 
     * @param category 加药类型 dosage type (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiIntelligentDenitrificationGetDosingStatisticDailysGetAsync(Integer category, String startTime, String endTime, String tenantId, final ApiCallback<List<DosingStatisticDailysOutput>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiIntelligentDenitrificationGetDosingStatisticDailysGetValidateBeforeCall(category, startTime, endTime, tenantId, _callback);
        Type localVarReturnType = new TypeToken<List<DosingStatisticDailysOutput>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiIntelligentDenitrificationGetInletLoadGet
     * @param productionLine 产线编号 product line code (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiIntelligentDenitrificationGetInletLoadGetCall(String productionLine, String startTime, String endTime, String tenantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/IntelligentDenitrification/GetInletLoad";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (productionLine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productionLine", productionLine));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiIntelligentDenitrificationGetInletLoadGetValidateBeforeCall(String productionLine, String startTime, String endTime, String tenantId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiIntelligentDenitrificationGetInletLoadGetCall(productionLine, startTime, endTime, tenantId, _callback);
        return localVarCall;

    }

    /**
     * 获取进水负荷 Get inlet water quality load data
     * 
     * @param productionLine 产线编号 product line code (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @return List&lt;InletLoadOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResult<List<InletLoadOutput>>apiIntelligentDenitrificationGetInletLoadGet(String productionLine, String startTime, String endTime, String tenantId) throws ApiException {
        ApiResponse<ApiResult<List<InletLoadOutput>>> localVarResp = apiIntelligentDenitrificationGetInletLoadGetWithHttpInfo(productionLine, startTime, endTime, tenantId);
        return localVarResp.getData();
    }

    /**
     * 获取进水负荷 Get inlet water quality load data
     * 
     * @param productionLine 产线编号 product line code (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @return ApiResponse&lt;List&lt;InletLoadOutput&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<List<InletLoadOutput>>> apiIntelligentDenitrificationGetInletLoadGetWithHttpInfo(String productionLine, String startTime, String endTime, String tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiIntelligentDenitrificationGetInletLoadGetValidateBeforeCall(productionLine, startTime, endTime, tenantId, null);
        Type localVarReturnType = new TypeToken<ApiResult<List<InletLoadOutput>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取进水负荷 Get inlet water quality load data (asynchronously)
     * 
     * @param productionLine 产线编号 product line code (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiIntelligentDenitrificationGetInletLoadGetAsync(String productionLine, String startTime, String endTime, String tenantId, final ApiCallback<List<InletLoadOutput>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiIntelligentDenitrificationGetInletLoadGetValidateBeforeCall(productionLine, startTime, endTime, tenantId, _callback);
        Type localVarReturnType = new TypeToken<List<InletLoadOutput>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiIntelligentDenitrificationGetOutletTNGet
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiIntelligentDenitrificationGetOutletTNGetCall(String startTime, String endTime, String tenantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/IntelligentDenitrification/GetOutletTN";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiIntelligentDenitrificationGetOutletTNGetValidateBeforeCall(String startTime, String endTime, String tenantId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiIntelligentDenitrificationGetOutletTNGetCall(startTime, endTime, tenantId, _callback);
        return localVarCall;

    }

    /**
     * 获取出水总氮 Get total effluent nitrogen concentration
     * 
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @return OutletTnOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResult<OutletTnOutput>apiIntelligentDenitrificationGetOutletTNGet(String startTime, String endTime, String tenantId) throws ApiException {
        ApiResponse<ApiResult<OutletTnOutput>> localVarResp = apiIntelligentDenitrificationGetOutletTNGetWithHttpInfo(startTime, endTime, tenantId);
        return localVarResp.getData();
    }

    /**
     * 获取出水总氮 Get total effluent nitrogen concentration
     * 
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @return ApiResponse&lt;OutletTnOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<OutletTnOutput>> apiIntelligentDenitrificationGetOutletTNGetWithHttpInfo(String startTime, String endTime, String tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiIntelligentDenitrificationGetOutletTNGetValidateBeforeCall(startTime, endTime, tenantId, null);
        Type localVarReturnType = new TypeToken<ApiResult<OutletTnOutput>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取出水总氮 Get total effluent nitrogen concentration (asynchronously)
     * 
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiIntelligentDenitrificationGetOutletTNGetAsync(String startTime, String endTime, String tenantId, final ApiCallback<OutletTnOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiIntelligentDenitrificationGetOutletTNGetValidateBeforeCall(startTime, endTime, tenantId, _callback);
        Type localVarReturnType = new TypeToken<OutletTnOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiIntelligentDenitrificationSaveDosingParameterPost
     * @param tenantId  (optional)
     * @param dosingParamSettingDto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiIntelligentDenitrificationSaveDosingParameterPostCall(String tenantId, List<DosingParamSettingDto> dosingParamSettingDto, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = dosingParamSettingDto;

        // create path and map variables
        String localVarPath = "/api/IntelligentDenitrification/SaveDosingParameter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiIntelligentDenitrificationSaveDosingParameterPostValidateBeforeCall(String tenantId, List<DosingParamSettingDto> dosingParamSettingDto, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiIntelligentDenitrificationSaveDosingParameterPostCall(tenantId, dosingParamSettingDto, _callback);
        return localVarCall;

    }

    /**
     * 保存加药参数 Save dosing parameters
     * 
     * @param tenantId  (optional)
     * @param dosingParamSettingDto  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResult<Object>apiIntelligentDenitrificationSaveDosingParameterPost(String tenantId, List<DosingParamSettingDto> dosingParamSettingDto) throws ApiException {
        ApiResponse<ApiResult<Object>> localVarResp = apiIntelligentDenitrificationSaveDosingParameterPostWithHttpInfo(tenantId, dosingParamSettingDto);
        return localVarResp.getData();
    }

    /**
     * 保存加药参数 Save dosing parameters
     * 
     * @param tenantId  (optional)
     * @param dosingParamSettingDto  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<Object>> apiIntelligentDenitrificationSaveDosingParameterPostWithHttpInfo(String tenantId, List<DosingParamSettingDto> dosingParamSettingDto) throws ApiException {
        okhttp3.Call localVarCall = apiIntelligentDenitrificationSaveDosingParameterPostValidateBeforeCall(tenantId, dosingParamSettingDto, null);
        Type localVarReturnType = new TypeToken<ApiResult<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 保存加药参数 Save dosing parameters (asynchronously)
     * 
     * @param tenantId  (optional)
     * @param dosingParamSettingDto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiIntelligentDenitrificationSaveDosingParameterPostAsync(String tenantId, List<DosingParamSettingDto> dosingParamSettingDto, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiIntelligentDenitrificationSaveDosingParameterPostValidateBeforeCall(tenantId, dosingParamSettingDto, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
