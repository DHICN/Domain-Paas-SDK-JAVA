/*
 * 污水业务中台领域服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DosingStatisticDailysInOut;
import org.openapitools.client.model.RemoteServiceErrorResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DosingStatisticDailyApi {
    private ApiClient localVarApiClient;

    public DosingStatisticDailyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DosingStatisticDailyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for apiDosingStatisticDailyAddDosingStatisticDailysPost
     * @param tenantId  (optional)
     * @param dosingStatisticDailysInOut  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDosingStatisticDailyAddDosingStatisticDailysPostCall(String tenantId, List<DosingStatisticDailysInOut> dosingStatisticDailysInOut, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = dosingStatisticDailysInOut;

        // create path and map variables
        String localVarPath = "/api/DosingStatisticDaily/AddDosingStatisticDailys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDosingStatisticDailyAddDosingStatisticDailysPostValidateBeforeCall(String tenantId, List<DosingStatisticDailysInOut> dosingStatisticDailysInOut, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiDosingStatisticDailyAddDosingStatisticDailysPostCall(tenantId, dosingStatisticDailysInOut, _callback);
        return localVarCall;

    }

    /**
     * 添加加药日统计信息 Add dosing daily statistic data
     * 
     * @param tenantId  (optional)
     * @param dosingStatisticDailysInOut  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResult<Object>apiDosingStatisticDailyAddDosingStatisticDailysPost(String tenantId, List<DosingStatisticDailysInOut> dosingStatisticDailysInOut) throws ApiException {
        ApiResponse<ApiResult<Object>> localVarResp = apiDosingStatisticDailyAddDosingStatisticDailysPostWithHttpInfo(tenantId, dosingStatisticDailysInOut);
        return localVarResp.getData();
    }

    /**
     * 添加加药日统计信息 Add dosing daily statistic data
     * 
     * @param tenantId  (optional)
     * @param dosingStatisticDailysInOut  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<Object>> apiDosingStatisticDailyAddDosingStatisticDailysPostWithHttpInfo(String tenantId, List<DosingStatisticDailysInOut> dosingStatisticDailysInOut) throws ApiException {
        okhttp3.Call localVarCall = apiDosingStatisticDailyAddDosingStatisticDailysPostValidateBeforeCall(tenantId, dosingStatisticDailysInOut, null);
        Type localVarReturnType = new TypeToken<ApiResult<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 添加加药日统计信息 Add dosing daily statistic data (asynchronously)
     * 
     * @param tenantId  (optional)
     * @param dosingStatisticDailysInOut  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDosingStatisticDailyAddDosingStatisticDailysPostAsync(String tenantId, List<DosingStatisticDailysInOut> dosingStatisticDailysInOut, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDosingStatisticDailyAddDosingStatisticDailysPostValidateBeforeCall(tenantId, dosingStatisticDailysInOut, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiDosingStatisticDailyDeleteDosingStatisticDailysPost
     * @param tenantId  (optional)
     * @param UUID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDosingStatisticDailyDeleteDosingStatisticDailysPostCall(String tenantId, List<UUID> UUID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UUID;

        // create path and map variables
        String localVarPath = "/api/DosingStatisticDaily/DeleteDosingStatisticDailys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDosingStatisticDailyDeleteDosingStatisticDailysPostValidateBeforeCall(String tenantId, List<UUID> UUID, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiDosingStatisticDailyDeleteDosingStatisticDailysPostCall(tenantId, UUID, _callback);
        return localVarCall;

    }

    /**
     * 根据ID删除加药日统计信息 Delete dosing daily statistic data by ids
     * 
     * @param tenantId  (optional)
     * @param UUID  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResult<Object>apiDosingStatisticDailyDeleteDosingStatisticDailysPost(String tenantId, List<UUID> UUID) throws ApiException {
        ApiResponse<ApiResult<Object>> localVarResp = apiDosingStatisticDailyDeleteDosingStatisticDailysPostWithHttpInfo(tenantId, UUID);
        return localVarResp.getData();
    }

    /**
     * 根据ID删除加药日统计信息 Delete dosing daily statistic data by ids
     * 
     * @param tenantId  (optional)
     * @param UUID  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<Object>> apiDosingStatisticDailyDeleteDosingStatisticDailysPostWithHttpInfo(String tenantId, List<UUID> UUID) throws ApiException {
        okhttp3.Call localVarCall = apiDosingStatisticDailyDeleteDosingStatisticDailysPostValidateBeforeCall(tenantId, UUID, null);
        Type localVarReturnType = new TypeToken<ApiResult<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据ID删除加药日统计信息 Delete dosing daily statistic data by ids (asynchronously)
     * 
     * @param tenantId  (optional)
     * @param UUID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDosingStatisticDailyDeleteDosingStatisticDailysPostAsync(String tenantId, List<UUID> UUID, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDosingStatisticDailyDeleteDosingStatisticDailysPostValidateBeforeCall(tenantId, UUID, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiDosingStatisticDailyGetAllDosingStatisticDailysGet
     * @param tenantId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDosingStatisticDailyGetAllDosingStatisticDailysGetCall(String tenantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/DosingStatisticDaily/GetAllDosingStatisticDailys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDosingStatisticDailyGetAllDosingStatisticDailysGetValidateBeforeCall(String tenantId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiDosingStatisticDailyGetAllDosingStatisticDailysGetCall(tenantId, _callback);
        return localVarCall;

    }

    /**
     * 获取所有加药日统计信息 Get all dosing daily statistic data
     * 
     * @param tenantId  (optional)
     * @return List&lt;DosingStatisticDailysInOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResult<List<DosingStatisticDailysInOut>>apiDosingStatisticDailyGetAllDosingStatisticDailysGet(String tenantId) throws ApiException {
        ApiResponse<ApiResult<List<DosingStatisticDailysInOut>>> localVarResp = apiDosingStatisticDailyGetAllDosingStatisticDailysGetWithHttpInfo(tenantId);
        return localVarResp.getData();
    }

    /**
     * 获取所有加药日统计信息 Get all dosing daily statistic data
     * 
     * @param tenantId  (optional)
     * @return ApiResponse&lt;List&lt;DosingStatisticDailysInOut&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<List<DosingStatisticDailysInOut>>> apiDosingStatisticDailyGetAllDosingStatisticDailysGetWithHttpInfo(String tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiDosingStatisticDailyGetAllDosingStatisticDailysGetValidateBeforeCall(tenantId, null);
        Type localVarReturnType = new TypeToken<ApiResult<List<DosingStatisticDailysInOut>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取所有加药日统计信息 Get all dosing daily statistic data (asynchronously)
     * 
     * @param tenantId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDosingStatisticDailyGetAllDosingStatisticDailysGetAsync(String tenantId, final ApiCallback<List<DosingStatisticDailysInOut>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDosingStatisticDailyGetAllDosingStatisticDailysGetValidateBeforeCall(tenantId, _callback);
        Type localVarReturnType = new TypeToken<List<DosingStatisticDailysInOut>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiDosingStatisticDailyGetDosingStatisticDailysByCategoryGet
     * @param category 药剂类型 dosage type (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDosingStatisticDailyGetDosingStatisticDailysByCategoryGetCall(Integer category, String startTime, String endTime, String tenantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/DosingStatisticDaily/GetDosingStatisticDailysByCategory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDosingStatisticDailyGetDosingStatisticDailysByCategoryGetValidateBeforeCall(Integer category, String startTime, String endTime, String tenantId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiDosingStatisticDailyGetDosingStatisticDailysByCategoryGetCall(category, startTime, endTime, tenantId, _callback);
        return localVarCall;

    }

    /**
     * 通过药剂类型获取加药日统计信息 Get dosing daily statistic data by dosage type
     * 
     * @param category 药剂类型 dosage type (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @return List&lt;DosingStatisticDailysInOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResult<List<DosingStatisticDailysInOut>>apiDosingStatisticDailyGetDosingStatisticDailysByCategoryGet(Integer category, String startTime, String endTime, String tenantId) throws ApiException {
        ApiResponse<ApiResult<List<DosingStatisticDailysInOut>>> localVarResp = apiDosingStatisticDailyGetDosingStatisticDailysByCategoryGetWithHttpInfo(category, startTime, endTime, tenantId);
        return localVarResp.getData();
    }

    /**
     * 通过药剂类型获取加药日统计信息 Get dosing daily statistic data by dosage type
     * 
     * @param category 药剂类型 dosage type (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @return ApiResponse&lt;List&lt;DosingStatisticDailysInOut&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<List<DosingStatisticDailysInOut>>> apiDosingStatisticDailyGetDosingStatisticDailysByCategoryGetWithHttpInfo(Integer category, String startTime, String endTime, String tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiDosingStatisticDailyGetDosingStatisticDailysByCategoryGetValidateBeforeCall(category, startTime, endTime, tenantId, null);
        Type localVarReturnType = new TypeToken<ApiResult<List<DosingStatisticDailysInOut>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 通过药剂类型获取加药日统计信息 Get dosing daily statistic data by dosage type (asynchronously)
     * 
     * @param category 药剂类型 dosage type (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDosingStatisticDailyGetDosingStatisticDailysByCategoryGetAsync(Integer category, String startTime, String endTime, String tenantId, final ApiCallback<List<DosingStatisticDailysInOut>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDosingStatisticDailyGetDosingStatisticDailysByCategoryGetValidateBeforeCall(category, startTime, endTime, tenantId, _callback);
        Type localVarReturnType = new TypeToken<List<DosingStatisticDailysInOut>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiDosingStatisticDailyGetDosingStatisticDailysByDateGet
     * @param time 时间 time (optional)
     * @param tenantId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDosingStatisticDailyGetDosingStatisticDailysByDateGetCall(String time, String tenantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/DosingStatisticDaily/GetDosingStatisticDailysByDate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (time != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time", time));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDosingStatisticDailyGetDosingStatisticDailysByDateGetValidateBeforeCall(String time, String tenantId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiDosingStatisticDailyGetDosingStatisticDailysByDateGetCall(time, tenantId, _callback);
        return localVarCall;

    }

    /**
     * 通过时间获取加药日统计信息 Get dosing daily statistic data by time
     * 
     * @param time 时间 time (optional)
     * @param tenantId  (optional)
     * @return List&lt;DosingStatisticDailysInOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResult<List<DosingStatisticDailysInOut>>apiDosingStatisticDailyGetDosingStatisticDailysByDateGet(String time, String tenantId) throws ApiException {
        ApiResponse<ApiResult<List<DosingStatisticDailysInOut>>> localVarResp = apiDosingStatisticDailyGetDosingStatisticDailysByDateGetWithHttpInfo(time, tenantId);
        return localVarResp.getData();
    }

    /**
     * 通过时间获取加药日统计信息 Get dosing daily statistic data by time
     * 
     * @param time 时间 time (optional)
     * @param tenantId  (optional)
     * @return ApiResponse&lt;List&lt;DosingStatisticDailysInOut&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<List<DosingStatisticDailysInOut>>> apiDosingStatisticDailyGetDosingStatisticDailysByDateGetWithHttpInfo(String time, String tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiDosingStatisticDailyGetDosingStatisticDailysByDateGetValidateBeforeCall(time, tenantId, null);
        Type localVarReturnType = new TypeToken<ApiResult<List<DosingStatisticDailysInOut>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 通过时间获取加药日统计信息 Get dosing daily statistic data by time (asynchronously)
     * 
     * @param time 时间 time (optional)
     * @param tenantId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDosingStatisticDailyGetDosingStatisticDailysByDateGetAsync(String time, String tenantId, final ApiCallback<List<DosingStatisticDailysInOut>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDosingStatisticDailyGetDosingStatisticDailysByDateGetValidateBeforeCall(time, tenantId, _callback);
        Type localVarReturnType = new TypeToken<List<DosingStatisticDailysInOut>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiDosingStatisticDailyUpdateDosingStatisticDailysPost
     * @param tenantId  (optional)
     * @param dosingStatisticDailysInOut  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDosingStatisticDailyUpdateDosingStatisticDailysPostCall(String tenantId, List<DosingStatisticDailysInOut> dosingStatisticDailysInOut, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = dosingStatisticDailysInOut;

        // create path and map variables
        String localVarPath = "/api/DosingStatisticDaily/UpdateDosingStatisticDailys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDosingStatisticDailyUpdateDosingStatisticDailysPostValidateBeforeCall(String tenantId, List<DosingStatisticDailysInOut> dosingStatisticDailysInOut, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiDosingStatisticDailyUpdateDosingStatisticDailysPostCall(tenantId, dosingStatisticDailysInOut, _callback);
        return localVarCall;

    }

    /**
     * 更新加药日统计信息 Update dosing daily statistic data
     * 
     * @param tenantId  (optional)
     * @param dosingStatisticDailysInOut  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResult<Object>apiDosingStatisticDailyUpdateDosingStatisticDailysPost(String tenantId, List<DosingStatisticDailysInOut> dosingStatisticDailysInOut) throws ApiException {
        ApiResponse<ApiResult<Object>> localVarResp = apiDosingStatisticDailyUpdateDosingStatisticDailysPostWithHttpInfo(tenantId, dosingStatisticDailysInOut);
        return localVarResp.getData();
    }

    /**
     * 更新加药日统计信息 Update dosing daily statistic data
     * 
     * @param tenantId  (optional)
     * @param dosingStatisticDailysInOut  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<Object>> apiDosingStatisticDailyUpdateDosingStatisticDailysPostWithHttpInfo(String tenantId, List<DosingStatisticDailysInOut> dosingStatisticDailysInOut) throws ApiException {
        okhttp3.Call localVarCall = apiDosingStatisticDailyUpdateDosingStatisticDailysPostValidateBeforeCall(tenantId, dosingStatisticDailysInOut, null);
        Type localVarReturnType = new TypeToken<ApiResult<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 更新加药日统计信息 Update dosing daily statistic data (asynchronously)
     * 
     * @param tenantId  (optional)
     * @param dosingStatisticDailysInOut  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDosingStatisticDailyUpdateDosingStatisticDailysPostAsync(String tenantId, List<DosingStatisticDailysInOut> dosingStatisticDailysInOut, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDosingStatisticDailyUpdateDosingStatisticDailysPostValidateBeforeCall(tenantId, dosingStatisticDailysInOut, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
