/*
 * 污水业务中台领域服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import org.openapitools.client.model.AssemblyConfigOutput;
import org.openapitools.client.model.ChemicalCostPerFlowOutput;
import org.openapitools.client.model.DataBoardFullOut;
import org.openapitools.client.model.DeviceMaintenanceOutput;
import org.openapitools.client.model.EntireProcessWqOut;
import org.openapitools.client.model.InletWqOut;
import org.openapitools.client.model.ModelOptimDto;
import org.openapitools.client.model.ModelPrecision;
import org.openapitools.client.model.OutletWqOut;
import org.openapitools.client.model.PredictAlarmOut;
import org.openapitools.client.model.RemoteServiceErrorResponse;
import org.openapitools.client.model.StatisDataBoardsView;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GeneralDataApi {
    private ApiClient localVarApiClient;

    public GeneralDataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GeneralDataApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for apiGeneralDataGetAssemblyConfigsGet
     * 
     * @param displayTypeEnum 展示类型 (optional)
     * @param modelName       模型名称 (optional)
     * @param productLine     工艺线 (optional)
     * @param tenantId        (optional)
     * @param _callback       Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public okhttp3.Call apiGeneralDataGetAssemblyConfigsGetCall(Integer displayTypeEnum, String modelName,
            String productLine, String tenantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/GeneralData/GetAssemblyConfigs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (displayTypeEnum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("displayTypeEnum", displayTypeEnum));
        }

        if (modelName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modelName", modelName));
        }

        if (productLine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productLine", productLine));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiGeneralDataGetAssemblyConfigsGetValidateBeforeCall(Integer displayTypeEnum,
            String modelName, String productLine, String tenantId, final ApiCallback _callback) throws ApiException {

        okhttp3.Call localVarCall = apiGeneralDataGetAssemblyConfigsGetCall(displayTypeEnum, modelName, productLine,
                tenantId, _callback);
        return localVarCall;

    }

    /**
     * 根据展示类型获取点位配置信息
     * 根据展示类型获取点位配置信息
     * 
     * @param displayTypeEnum 展示类型 (optional)
     * @param modelName       模型名称 (optional)
     * @param productLine     工艺线 (optional)
     * @param tenantId        (optional)
     * @return List&lt;AssemblyConfigOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public ApiResult<List<AssemblyConfigOutput>> apiGeneralDataGetAssemblyConfigsGet(Integer displayTypeEnum,
            String modelName, String productLine, String tenantId) throws ApiException {
        ApiResponse<ApiResult<List<AssemblyConfigOutput>>> localVarResp = apiGeneralDataGetAssemblyConfigsGetWithHttpInfo(
                displayTypeEnum, modelName, productLine, tenantId);
        return localVarResp.getData();
    }

    /**
     * 根据展示类型获取点位配置信息
     * 根据展示类型获取点位配置信息
     * 
     * @param displayTypeEnum 展示类型 (optional)
     * @param modelName       模型名称 (optional)
     * @param productLine     工艺线 (optional)
     * @param tenantId        (optional)
     * @return ApiResponse&lt;List&lt;AssemblyConfigOutput&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public ApiResponse<ApiResult<List<AssemblyConfigOutput>>> apiGeneralDataGetAssemblyConfigsGetWithHttpInfo(
            Integer displayTypeEnum, String modelName, String productLine, String tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiGeneralDataGetAssemblyConfigsGetValidateBeforeCall(displayTypeEnum, modelName,
                productLine, tenantId, null);
        Type localVarReturnType = new TypeToken<ApiResult<List<AssemblyConfigOutput>>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据展示类型获取点位配置信息 (asynchronously)
     * 根据展示类型获取点位配置信息
     * 
     * @param displayTypeEnum 展示类型 (optional)
     * @param modelName       模型名称 (optional)
     * @param productLine     工艺线 (optional)
     * @param tenantId        (optional)
     * @param _callback       The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the
     *                      request body object
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public okhttp3.Call apiGeneralDataGetAssemblyConfigsGetAsync(Integer displayTypeEnum, String modelName,
            String productLine, String tenantId, final ApiCallback<List<AssemblyConfigOutput>> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = apiGeneralDataGetAssemblyConfigsGetValidateBeforeCall(displayTypeEnum, modelName,
                productLine, tenantId, _callback);
        Type localVarReturnType = new TypeToken<List<AssemblyConfigOutput>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for apiGeneralDataGetInletWQGet
     * 
     * @param startTime   开始时间 start time (optional)
     * @param endTime     结束时间 end time (optional)
     * @param modelName   模板模型名称 template model name (optional)
     * @param productLine 工艺线代码 product line code (optional)
     * @param tenantId    (optional)
     * @param _callback   Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public okhttp3.Call apiGeneralDataGetInletWQGetCall(String startTime, String endTime, String modelName,
            String productLine, String tenantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/GeneralData/GetInletWQ";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (modelName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modelName", modelName));
        }

        if (productLine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productLine", productLine));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiGeneralDataGetInletWQGetValidateBeforeCall(String startTime, String endTime,
            String modelName, String productLine, String tenantId, final ApiCallback _callback) throws ApiException {

        okhttp3.Call localVarCall = apiGeneralDataGetInletWQGetCall(startTime, endTime, modelName, productLine,
                tenantId, _callback);
        return localVarCall;

    }

    /**
     * 获取进水水质数据，包括原始数据和清洗后数据 Get inlet water quality data, including source data and
     * processed data
     * 
     * @param startTime   开始时间 start time (optional)
     * @param endTime     结束时间 end time (optional)
     * @param modelName   模板模型名称 template model name (optional)
     * @param productLine 工艺线代码 product line code (optional)
     * @param tenantId    (optional)
     * @return List&lt;InletWqOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public ApiResult<List<InletWqOut>> apiGeneralDataGetInletWQGet(String startTime, String endTime, String modelName,
            String productLine, String tenantId) throws ApiException {
        ApiResponse<ApiResult<List<InletWqOut>>> localVarResp = apiGeneralDataGetInletWQGetWithHttpInfo(startTime,
                endTime, modelName, productLine, tenantId);
        return localVarResp.getData();
    }

    /**
     * 获取进水水质数据，包括原始数据和清洗后数据 Get inlet water quality data, including source data and
     * processed data
     * 
     * @param startTime   开始时间 start time (optional)
     * @param endTime     结束时间 end time (optional)
     * @param modelName   模板模型名称 template model name (optional)
     * @param productLine 工艺线代码 product line code (optional)
     * @param tenantId    (optional)
     * @return ApiResponse&lt;List&lt;InletWqOut&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public ApiResponse<ApiResult<List<InletWqOut>>> apiGeneralDataGetInletWQGetWithHttpInfo(String startTime,
            String endTime, String modelName, String productLine, String tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiGeneralDataGetInletWQGetValidateBeforeCall(startTime, endTime, modelName,
                productLine, tenantId, null);
        Type localVarReturnType = new TypeToken<ApiResult<List<InletWqOut>>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取进水水质数据，包括原始数据和清洗后数据 Get inlet water quality data, including source data and
     * processed data (asynchronously)
     * 
     * @param startTime   开始时间 start time (optional)
     * @param endTime     结束时间 end time (optional)
     * @param modelName   模板模型名称 template model name (optional)
     * @param productLine 工艺线代码 product line code (optional)
     * @param tenantId    (optional)
     * @param _callback   The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the
     *                      request body object
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public okhttp3.Call apiGeneralDataGetInletWQGetAsync(String startTime, String endTime, String modelName,
            String productLine, String tenantId, final ApiCallback<List<InletWqOut>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiGeneralDataGetInletWQGetValidateBeforeCall(startTime, endTime, modelName,
                productLine, tenantId, _callback);
        Type localVarReturnType = new TypeToken<List<InletWqOut>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for apiGeneralDataGetModelPrecisionGet
     * 
     * @param startTime 开始时间 start time (optional)
     * @param endTime   结束时间 end time (optional)
     * @param modelName 模板模型名称 template model name (optional)
     * @param tenantId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public okhttp3.Call apiGeneralDataGetModelPrecisionGetCall(String startTime, String endTime, String modelName,
            String tenantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/GeneralData/GetModelPrecision";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (modelName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modelName", modelName));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiGeneralDataGetModelPrecisionGetValidateBeforeCall(String startTime, String endTime,
            String modelName, String tenantId, final ApiCallback _callback) throws ApiException {

        okhttp3.Call localVarCall = apiGeneralDataGetModelPrecisionGetCall(startTime, endTime, modelName, tenantId,
                _callback);
        return localVarCall;

    }

    /**
     * 获取指定时间段内的模型精度统计数据 Get model precison statistic data of a certain period
     * 
     * @param startTime 开始时间 start time (optional)
     * @param endTime   结束时间 end time (optional)
     * @param modelName 模板模型名称 template model name (optional)
     * @param tenantId  (optional)
     * @return List&lt;ModelPrecision&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public ApiResult<List<ModelPrecision>> apiGeneralDataGetModelPrecisionGet(String startTime, String endTime,
            String modelName, String tenantId) throws ApiException {
        ApiResponse<ApiResult<List<ModelPrecision>>> localVarResp = apiGeneralDataGetModelPrecisionGetWithHttpInfo(
                startTime, endTime, modelName, tenantId);
        return localVarResp.getData();
    }

    /**
     * 获取指定时间段内的模型精度统计数据 Get model precison statistic data of a certain period
     * 
     * @param startTime 开始时间 start time (optional)
     * @param endTime   结束时间 end time (optional)
     * @param modelName 模板模型名称 template model name (optional)
     * @param tenantId  (optional)
     * @return ApiResponse&lt;List&lt;ModelPrecision&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public ApiResponse<ApiResult<List<ModelPrecision>>> apiGeneralDataGetModelPrecisionGetWithHttpInfo(String startTime,
            String endTime, String modelName, String tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiGeneralDataGetModelPrecisionGetValidateBeforeCall(startTime, endTime, modelName,
                tenantId, null);
        Type localVarReturnType = new TypeToken<ApiResult<List<ModelPrecision>>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取指定时间段内的模型精度统计数据 Get model precison statistic data of a certain period
     * (asynchronously)
     * 
     * @param startTime 开始时间 start time (optional)
     * @param endTime   结束时间 end time (optional)
     * @param modelName 模板模型名称 template model name (optional)
     * @param tenantId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the
     *                      request body object
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public okhttp3.Call apiGeneralDataGetModelPrecisionGetAsync(String startTime, String endTime, String modelName,
            String tenantId, final ApiCallback<List<ModelPrecision>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiGeneralDataGetModelPrecisionGetValidateBeforeCall(startTime, endTime, modelName,
                tenantId, _callback);
        Type localVarReturnType = new TypeToken<List<ModelPrecision>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for apiGeneralDataGetOptimOutDataGet
     * 
     * @param startTime   开始时间 start time (optional)
     * @param endTime     结束时间 end time (optional)
     * @param productLine 工艺线代码 product line code (optional)
     * @param modelName   模板模型名称 template model name (optional)
     * @param tenantId    (optional)
     * @param _callback   Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public okhttp3.Call apiGeneralDataGetOptimOutDataGetCall(String startTime, String endTime, String productLine,
            String modelName, String tenantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/GeneralData/GetOptimOutData";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (productLine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productLine", productLine));
        }

        if (modelName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modelName", modelName));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiGeneralDataGetOptimOutDataGetValidateBeforeCall(String startTime, String endTime,
            String productLine, String modelName, String tenantId, final ApiCallback _callback) throws ApiException {

        okhttp3.Call localVarCall = apiGeneralDataGetOptimOutDataGetCall(startTime, endTime, productLine, modelName,
                tenantId, _callback);
        return localVarCall;

    }

    /**
     * 获取优化建议 Get optimization recommendation data
     * 返回包括优化二沉池出水水质，优化控制建议 Secondary sedimentation tank effluent water quality
     * statistic data and optimized control recommendation data will be returned.
     * 
     * @param startTime   开始时间 start time (optional)
     * @param endTime     结束时间 end time (optional)
     * @param productLine 工艺线代码 product line code (optional)
     * @param modelName   模板模型名称 template model name (optional)
     * @param tenantId    (optional)
     * @return ModelOptimDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public ApiResult<ModelOptimDto> apiGeneralDataGetOptimOutDataGet(String startTime, String endTime,
            String productLine, String modelName, String tenantId) throws ApiException {
        ApiResponse<ApiResult<ModelOptimDto>> localVarResp = apiGeneralDataGetOptimOutDataGetWithHttpInfo(startTime,
                endTime, productLine, modelName, tenantId);
        return localVarResp.getData();
    }

    /**
     * 获取优化建议 Get optimization recommendation data
     * 返回包括优化二沉池出水水质，优化控制建议 Secondary sedimentation tank effluent water quality
     * statistic data and optimized control recommendation data will be returned.
     * 
     * @param startTime   开始时间 start time (optional)
     * @param endTime     结束时间 end time (optional)
     * @param productLine 工艺线代码 product line code (optional)
     * @param modelName   模板模型名称 template model name (optional)
     * @param tenantId    (optional)
     * @return ApiResponse&lt;ModelOptimDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public ApiResponse<ApiResult<ModelOptimDto>> apiGeneralDataGetOptimOutDataGetWithHttpInfo(String startTime,
            String endTime, String productLine, String modelName, String tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiGeneralDataGetOptimOutDataGetValidateBeforeCall(startTime, endTime, productLine,
                modelName, tenantId, null);
        Type localVarReturnType = new TypeToken<ApiResult<ModelOptimDto>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取优化建议 Get optimization recommendation data (asynchronously)
     * 返回包括优化二沉池出水水质，优化控制建议 Secondary sedimentation tank effluent water quality
     * statistic data and optimized control recommendation data will be returned.
     * 
     * @param startTime   开始时间 start time (optional)
     * @param endTime     结束时间 end time (optional)
     * @param productLine 工艺线代码 product line code (optional)
     * @param modelName   模板模型名称 template model name (optional)
     * @param tenantId    (optional)
     * @param _callback   The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the
     *                      request body object
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public okhttp3.Call apiGeneralDataGetOptimOutDataGetAsync(String startTime, String endTime, String productLine,
            String modelName, String tenantId, final ApiCallback<ModelOptimDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiGeneralDataGetOptimOutDataGetValidateBeforeCall(startTime, endTime, productLine,
                modelName, tenantId, _callback);
        Type localVarReturnType = new TypeToken<ModelOptimDto>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for apiGeneralDataGetOutletWQGet
     * 
     * @param startTime 开始时间 start time (optional)
     * @param endTime   结束时间 end time (optional)
     * @param modelName 模板模型名称 template model name (optional)
     * @param tenantId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public okhttp3.Call apiGeneralDataGetOutletWQGetCall(String startTime, String endTime, String modelName,
            String tenantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/GeneralData/GetOutletWQ";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (modelName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modelName", modelName));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiGeneralDataGetOutletWQGetValidateBeforeCall(String startTime, String endTime,
            String modelName, String tenantId, final ApiCallback _callback) throws ApiException {

        okhttp3.Call localVarCall = apiGeneralDataGetOutletWQGetCall(startTime, endTime, modelName, tenantId,
                _callback);
        return localVarCall;

    }

    /**
     * 获取出水水质数据，包括在线数据和模拟结果数据 Get effluent water quality data, including online
     * processed data and model result data
     * 
     * @param startTime 开始时间 start time (optional)
     * @param endTime   结束时间 end time (optional)
     * @param modelName 模板模型名称 template model name (optional)
     * @param tenantId  (optional)
     * @return List&lt;OutletWqOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public ApiResult<List<OutletWqOut>> apiGeneralDataGetOutletWQGet(String startTime, String endTime, String modelName,
            String tenantId) throws ApiException {
        ApiResponse<ApiResult<List<OutletWqOut>>> localVarResp = apiGeneralDataGetOutletWQGetWithHttpInfo(startTime,
                endTime, modelName, tenantId);
        return localVarResp.getData();
    }

    /**
     * 获取出水水质数据，包括在线数据和模拟结果数据 Get effluent water quality data, including online
     * processed data and model result data
     * 
     * @param startTime 开始时间 start time (optional)
     * @param endTime   结束时间 end time (optional)
     * @param modelName 模板模型名称 template model name (optional)
     * @param tenantId  (optional)
     * @return ApiResponse&lt;List&lt;OutletWqOut&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public ApiResponse<ApiResult<List<OutletWqOut>>> apiGeneralDataGetOutletWQGetWithHttpInfo(String startTime,
            String endTime, String modelName, String tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiGeneralDataGetOutletWQGetValidateBeforeCall(startTime, endTime, modelName,
                tenantId, null);
        Type localVarReturnType = new TypeToken<ApiResult<List<OutletWqOut>>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取出水水质数据，包括在线数据和模拟结果数据 Get effluent water quality data, including online
     * processed data and model result data (asynchronously)
     * 
     * @param startTime 开始时间 start time (optional)
     * @param endTime   结束时间 end time (optional)
     * @param modelName 模板模型名称 template model name (optional)
     * @param tenantId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the
     *                      request body object
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public okhttp3.Call apiGeneralDataGetOutletWQGetAsync(String startTime, String endTime, String modelName,
            String tenantId, final ApiCallback<List<OutletWqOut>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiGeneralDataGetOutletWQGetValidateBeforeCall(startTime, endTime, modelName,
                tenantId, _callback);
        Type localVarReturnType = new TypeToken<List<OutletWqOut>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for apiGeneralDataGetPredictAlarmGet
     * 
     * @param startTime          开始时间 start time (optional)
     * @param endTime            结束时间 end time (optional)
     * @param alarmTypes         消息类型 alarm types (optional)
     * @param isNationalStandard 是否获取国标 true indicates grade&#x3D;1, and false
     *                           indicates grade!&#x3D;1 (optional)
     * @param tenantId           (optional)
     * @param _callback          Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public okhttp3.Call apiGeneralDataGetPredictAlarmGetCall(String startTime, String endTime, List<String> alarmTypes,
            String isNationalStandard, String tenantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/GeneralData/GetPredictAlarm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndTime", endTime));
        }

        if (alarmTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "AlarmTypes", alarmTypes));
        }

        if (isNationalStandard != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IsNationalStandard", isNationalStandard));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiGeneralDataGetPredictAlarmGetValidateBeforeCall(String startTime, String endTime,
            List<String> alarmTypes, String isNationalStandard, String tenantId, final ApiCallback _callback)
            throws ApiException {

        okhttp3.Call localVarCall = apiGeneralDataGetPredictAlarmGetCall(startTime, endTime, alarmTypes,
                isNationalStandard, tenantId, _callback);
        return localVarCall;

    }

    /**
     * 获取进出水水质预警信息 Get alarm data for inlet and outlet water quality
     * 
     * @param startTime          开始时间 start time (optional)
     * @param endTime            结束时间 end time (optional)
     * @param alarmTypes         消息类型 alarm types (optional)
     * @param isNationalStandard 是否获取国标 true indicates grade&#x3D;1, and false
     *                           indicates grade!&#x3D;1 (optional)
     * @param tenantId           (optional)
     * @return List&lt;PredictAlarmOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public ApiResult<List<PredictAlarmOut>> apiGeneralDataGetPredictAlarmGet(String startTime, String endTime,
            List<String> alarmTypes, String isNationalStandard, String tenantId) throws ApiException {
        ApiResponse<ApiResult<List<PredictAlarmOut>>> localVarResp = apiGeneralDataGetPredictAlarmGetWithHttpInfo(
                startTime, endTime, alarmTypes, isNationalStandard, tenantId);
        return localVarResp.getData();
    }

    /**
     * 获取进出水水质预警信息 Get alarm data for inlet and outlet water quality
     * 
     * @param startTime          开始时间 start time (optional)
     * @param endTime            结束时间 end time (optional)
     * @param alarmTypes         消息类型 alarm types (optional)
     * @param isNationalStandard 是否获取国标 true indicates grade&#x3D;1, and false
     *                           indicates grade!&#x3D;1 (optional)
     * @param tenantId           (optional)
     * @return ApiResponse&lt;List&lt;PredictAlarmOut&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public ApiResponse<ApiResult<List<PredictAlarmOut>>> apiGeneralDataGetPredictAlarmGetWithHttpInfo(String startTime,
            String endTime, List<String> alarmTypes, String isNationalStandard, String tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiGeneralDataGetPredictAlarmGetValidateBeforeCall(startTime, endTime, alarmTypes,
                isNationalStandard, tenantId, null);
        Type localVarReturnType = new TypeToken<ApiResult<List<PredictAlarmOut>>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取进出水水质预警信息 Get alarm data for inlet and outlet water quality
     * (asynchronously)
     * 
     * @param startTime          开始时间 start time (optional)
     * @param endTime            结束时间 end time (optional)
     * @param alarmTypes         消息类型 alarm types (optional)
     * @param isNationalStandard 是否获取国标 true indicates grade&#x3D;1, and false
     *                           indicates grade!&#x3D;1 (optional)
     * @param tenantId           (optional)
     * @param _callback          The callback to be executed when the API call
     *                           finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the
     *                      request body object
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public okhttp3.Call apiGeneralDataGetPredictAlarmGetAsync(String startTime, String endTime, List<String> alarmTypes,
            String isNationalStandard, String tenantId, final ApiCallback<List<PredictAlarmOut>> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = apiGeneralDataGetPredictAlarmGetValidateBeforeCall(startTime, endTime, alarmTypes,
                isNationalStandard, tenantId, _callback);
        Type localVarReturnType = new TypeToken<List<PredictAlarmOut>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for apiV2OutputChemicalCostGet
     * 
     * @param modelName 模型名称 template model name (optional)
     * @param tenantId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public okhttp3.Call apiV2OutputChemicalCostGetCall(String modelName, String tenantId, final ApiCallback _callback)
            throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/output/chemical-cost";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (modelName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modelName", modelName));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2OutputChemicalCostGetValidateBeforeCall(String modelName, String tenantId,
            final ApiCallback _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2OutputChemicalCostGetCall(modelName, tenantId, _callback);
        return localVarCall;

    }

    /**
     * 根据实际投药量，获取吨水药耗统计信息 Get dosage cost per ton of inflow water statistic result
     * based on actual dosage
     * 返回过去七天，每天每条工艺线上的碳源加药吨水药耗和MCCR加药吨水药耗 Carbon source doage cost per ton of water
     * and MCCR dosage cost per ton of water of each product line and each day in
     * the past seven days will be returned.
     * 
     * @param modelName 模型名称 template model name (optional)
     * @param tenantId  (optional)
     * @return List&lt;ChemicalCostPerFlowOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public ApiResult<List<ChemicalCostPerFlowOutput>> apiV2OutputChemicalCostGet(String modelName, String tenantId)
            throws ApiException {
        ApiResponse<ApiResult<List<ChemicalCostPerFlowOutput>>> localVarResp = apiV2OutputChemicalCostGetWithHttpInfo(
                modelName, tenantId);
        return localVarResp.getData();
    }

    /**
     * 根据实际投药量，获取吨水药耗统计信息 Get dosage cost per ton of inflow water statistic result
     * based on actual dosage
     * 返回过去七天，每天每条工艺线上的碳源加药吨水药耗和MCCR加药吨水药耗 Carbon source doage cost per ton of water
     * and MCCR dosage cost per ton of water of each product line and each day in
     * the past seven days will be returned.
     * 
     * @param modelName 模型名称 template model name (optional)
     * @param tenantId  (optional)
     * @return ApiResponse&lt;List&lt;ChemicalCostPerFlowOutput&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public ApiResponse<ApiResult<List<ChemicalCostPerFlowOutput>>> apiV2OutputChemicalCostGetWithHttpInfo(
            String modelName, String tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiV2OutputChemicalCostGetValidateBeforeCall(modelName, tenantId, null);
        Type localVarReturnType = new TypeToken<ApiResult<List<ChemicalCostPerFlowOutput>>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据实际投药量，获取吨水药耗统计信息 Get dosage cost per ton of inflow water statistic result
     * based on actual dosage (asynchronously)
     * 返回过去七天，每天每条工艺线上的碳源加药吨水药耗和MCCR加药吨水药耗 Carbon source doage cost per ton of water
     * and MCCR dosage cost per ton of water of each product line and each day in
     * the past seven days will be returned.
     * 
     * @param modelName 模型名称 template model name (optional)
     * @param tenantId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the
     *                      request body object
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public okhttp3.Call apiV2OutputChemicalCostGetAsync(String modelName, String tenantId,
            final ApiCallback<List<ChemicalCostPerFlowOutput>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2OutputChemicalCostGetValidateBeforeCall(modelName, tenantId, _callback);
        Type localVarReturnType = new TypeToken<List<ChemicalCostPerFlowOutput>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for apiV2OutputDataBoardsGet
     * 
     * @param tenantId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public okhttp3.Call apiV2OutputDataBoardsGetCall(String tenantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/output/data-boards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2OutputDataBoardsGetValidateBeforeCall(String tenantId, final ApiCallback _callback)
            throws ApiException {

        okhttp3.Call localVarCall = apiV2OutputDataBoardsGetCall(tenantId, _callback);
        return localVarCall;

    }

    /**
     * 获取数据看板统计数据 Get statistic data for data board
     * 
     * @param tenantId (optional)
     * @return List&lt;DataBoardFullOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public ApiResult<List<DataBoardFullOut>> apiV2OutputDataBoardsGet(String tenantId) throws ApiException {
        ApiResponse<ApiResult<List<DataBoardFullOut>>> localVarResp = apiV2OutputDataBoardsGetWithHttpInfo(tenantId);
        return localVarResp.getData();
    }

    /**
     * 获取数据看板统计数据 Get statistic data for data board
     * 
     * @param tenantId (optional)
     * @return ApiResponse&lt;List&lt;DataBoardFullOut&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public ApiResponse<ApiResult<List<DataBoardFullOut>>> apiV2OutputDataBoardsGetWithHttpInfo(String tenantId)
            throws ApiException {
        okhttp3.Call localVarCall = apiV2OutputDataBoardsGetValidateBeforeCall(tenantId, null);
        Type localVarReturnType = new TypeToken<ApiResult<List<DataBoardFullOut>>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取数据看板统计数据 Get statistic data for data board (asynchronously)
     * 
     * @param tenantId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the
     *                      request body object
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public okhttp3.Call apiV2OutputDataBoardsGetAsync(String tenantId,
            final ApiCallback<List<DataBoardFullOut>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2OutputDataBoardsGetValidateBeforeCall(tenantId, _callback);
        Type localVarReturnType = new TypeToken<List<DataBoardFullOut>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for apiV2OutputDeviceMaintenanceGet
     * 
     * @param startTime 开始时间 start time (optional)
     * @param endTime   结束时间 end time (optional)
     * @param tenantId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public okhttp3.Call apiV2OutputDeviceMaintenanceGetCall(String startTime, String endTime, String tenantId,
            final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/output/device/maintenance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2OutputDeviceMaintenanceGetValidateBeforeCall(String startTime, String endTime,
            String tenantId, final ApiCallback _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2OutputDeviceMaintenanceGetCall(startTime, endTime, tenantId, _callback);
        return localVarCall;

    }

    /**
     * 查询关键设备维护预警信息 Get key device maintenance warning information
     * 
     * @param startTime 开始时间 start time (optional)
     * @param endTime   结束时间 end time (optional)
     * @param tenantId  (optional)
     * @return List&lt;DeviceMaintenanceOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public ApiResult<List<DeviceMaintenanceOutput>> apiV2OutputDeviceMaintenanceGet(String startTime, String endTime,
            String tenantId) throws ApiException {
        ApiResponse<ApiResult<List<DeviceMaintenanceOutput>>> localVarResp = apiV2OutputDeviceMaintenanceGetWithHttpInfo(
                startTime, endTime, tenantId);
        return localVarResp.getData();
    }

    /**
     * 查询关键设备维护预警信息 Get key device maintenance warning information
     * 
     * @param startTime 开始时间 start time (optional)
     * @param endTime   结束时间 end time (optional)
     * @param tenantId  (optional)
     * @return ApiResponse&lt;List&lt;DeviceMaintenanceOutput&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public ApiResponse<ApiResult<List<DeviceMaintenanceOutput>>> apiV2OutputDeviceMaintenanceGetWithHttpInfo(
            String startTime, String endTime, String tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiV2OutputDeviceMaintenanceGetValidateBeforeCall(startTime, endTime, tenantId,
                null);
        Type localVarReturnType = new TypeToken<ApiResult<List<DeviceMaintenanceOutput>>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 查询关键设备维护预警信息 Get key device maintenance warning information (asynchronously)
     * 
     * @param startTime 开始时间 start time (optional)
     * @param endTime   结束时间 end time (optional)
     * @param tenantId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the
     *                      request body object
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public okhttp3.Call apiV2OutputDeviceMaintenanceGetAsync(String startTime, String endTime, String tenantId,
            final ApiCallback<List<DeviceMaintenanceOutput>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2OutputDeviceMaintenanceGetValidateBeforeCall(startTime, endTime, tenantId,
                _callback);
        Type localVarReturnType = new TypeToken<List<DeviceMaintenanceOutput>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for apiV2OutputEntireProcessTsByProductlineGet
     * 
     * @param productLine 工艺线代码 product line code (optional)
     * @param startTime   开始时间 start time (optional)
     * @param endTime     结束时间 end time (optional)
     * @param modelName   模板模型名称 template model name (optional)
     * @param tenantId    (optional)
     * @param _callback   Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public okhttp3.Call apiV2OutputEntireProcessTsByProductlineGetCall(String productLine, String startTime,
            String endTime, String modelName, String tenantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/output/entire-process/ts-by-productline";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (productLine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productLine", productLine));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (modelName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modelName", modelName));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2OutputEntireProcessTsByProductlineGetValidateBeforeCall(String productLine,
            String startTime, String endTime, String modelName, String tenantId, final ApiCallback _callback)
            throws ApiException {

        okhttp3.Call localVarCall = apiV2OutputEntireProcessTsByProductlineGetCall(productLine, startTime, endTime,
                modelName, tenantId, _callback);
        return localVarCall;

    }

    /**
     * 通过生产线获取全流程水质 Get water quality entire process data by product line
     * 查询指定时间段内，所有指标在每一个工艺单元上的时间序列结果数据，包括进水、各个生化池、出水 Get time-series result data of
     * all the indicators on each process unit including inlet, biochemical pools
     * and outlet of a certain period.
     * 
     * @param productLine 工艺线代码 product line code (optional)
     * @param startTime   开始时间 start time (optional)
     * @param endTime     结束时间 end time (optional)
     * @param modelName   模板模型名称 template model name (optional)
     * @param tenantId    (optional)
     * @return List&lt;EntireProcessWqOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public ApiResult<List<EntireProcessWqOut>> apiV2OutputEntireProcessTsByProductlineGet(String productLine,
            String startTime, String endTime, String modelName, String tenantId) throws ApiException {
        ApiResponse<ApiResult<List<EntireProcessWqOut>>> localVarResp = apiV2OutputEntireProcessTsByProductlineGetWithHttpInfo(
                productLine, startTime, endTime, modelName, tenantId);
        return localVarResp.getData();
    }

    /**
     * 通过生产线获取全流程水质 Get water quality entire process data by product line
     * 查询指定时间段内，所有指标在每一个工艺单元上的时间序列结果数据，包括进水、各个生化池、出水 Get time-series result data of
     * all the indicators on each process unit including inlet, biochemical pools
     * and outlet of a certain period.
     * 
     * @param productLine 工艺线代码 product line code (optional)
     * @param startTime   开始时间 start time (optional)
     * @param endTime     结束时间 end time (optional)
     * @param modelName   模板模型名称 template model name (optional)
     * @param tenantId    (optional)
     * @return ApiResponse&lt;List&lt;EntireProcessWqOut&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public ApiResponse<ApiResult<List<EntireProcessWqOut>>> apiV2OutputEntireProcessTsByProductlineGetWithHttpInfo(
            String productLine, String startTime, String endTime, String modelName, String tenantId)
            throws ApiException {
        okhttp3.Call localVarCall = apiV2OutputEntireProcessTsByProductlineGetValidateBeforeCall(productLine, startTime,
                endTime, modelName, tenantId, null);
        Type localVarReturnType = new TypeToken<ApiResult<List<EntireProcessWqOut>>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 通过生产线获取全流程水质 Get water quality entire process data by product line
     * (asynchronously)
     * 查询指定时间段内，所有指标在每一个工艺单元上的时间序列结果数据，包括进水、各个生化池、出水 Get time-series result data of
     * all the indicators on each process unit including inlet, biochemical pools
     * and outlet of a certain period.
     * 
     * @param productLine 工艺线代码 product line code (optional)
     * @param startTime   开始时间 start time (optional)
     * @param endTime     结束时间 end time (optional)
     * @param modelName   模板模型名称 template model name (optional)
     * @param tenantId    (optional)
     * @param _callback   The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the
     *                      request body object
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public okhttp3.Call apiV2OutputEntireProcessTsByProductlineGetAsync(String productLine, String startTime,
            String endTime, String modelName, String tenantId, final ApiCallback<List<EntireProcessWqOut>> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = apiV2OutputEntireProcessTsByProductlineGetValidateBeforeCall(productLine, startTime,
                endTime, modelName, tenantId, _callback);
        Type localVarReturnType = new TypeToken<List<EntireProcessWqOut>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for apiV2OutputRefreshDataBoardsGet
     * 
     * @param tenantId  (optional)
     * @param tenantId2 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public okhttp3.Call apiV2OutputRefreshDataBoardsGetCall(String tenantId, String tenantId2,
            final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/output/refresh-data-boards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId2 != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId2));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2OutputRefreshDataBoardsGetValidateBeforeCall(String tenantId, String tenantId2,
            final ApiCallback _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2OutputRefreshDataBoardsGetCall(tenantId, tenantId2, _callback);
        return localVarCall;

    }

    /**
     * 定时统计看板数据
     * 
     * @param tenantId  (optional)
     * @param tenantId2 (optional)
     * @return StatisDataBoardsView
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public ApiResult<StatisDataBoardsView> apiV2OutputRefreshDataBoardsGet(String tenantId, String tenantId2)
            throws ApiException {
        ApiResponse<ApiResult<StatisDataBoardsView>> localVarResp = apiV2OutputRefreshDataBoardsGetWithHttpInfo(
                tenantId, tenantId2);
        return localVarResp.getData();
    }

    /**
     * 定时统计看板数据
     * 
     * @param tenantId  (optional)
     * @param tenantId2 (optional)
     * @return ApiResponse&lt;StatisDataBoardsView&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     *                      deserialize the response body
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public ApiResponse<ApiResult<StatisDataBoardsView>> apiV2OutputRefreshDataBoardsGetWithHttpInfo(String tenantId,
            String tenantId2) throws ApiException {
        okhttp3.Call localVarCall = apiV2OutputRefreshDataBoardsGetValidateBeforeCall(tenantId, tenantId2, null);
        Type localVarReturnType = new TypeToken<ApiResult<StatisDataBoardsView>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 定时统计看板数据 (asynchronously)
     * 
     * @param tenantId  (optional)
     * @param tenantId2 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the
     *                      request body object
     * @http.response.details
     *                        <table summary="Response Details" border="1">
     *                        <tr>
     *                        <td>Status Code</td>
     *                        <td>Description</td>
     *                        <td>Response Headers</td>
     *                        </tr>
     *                        <tr>
     *                        <td>200</td>
     *                        <td>Success</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>400</td>
     *                        <td>Bad Request</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>401</td>
     *                        <td>Unauthorized</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>403</td>
     *                        <td>Forbidden</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>404</td>
     *                        <td>Not Found</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>500</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        <tr>
     *                        <td>501</td>
     *                        <td>Server Error</td>
     *                        <td>-</td>
     *                        </tr>
     *                        </table>
     */
    public okhttp3.Call apiV2OutputRefreshDataBoardsGetAsync(String tenantId, String tenantId2,
            final ApiCallback<StatisDataBoardsView> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2OutputRefreshDataBoardsGetValidateBeforeCall(tenantId, tenantId2, _callback);
        Type localVarReturnType = new TypeToken<StatisDataBoardsView>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
