/*
 * 污水业务中台领域服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CatalysisBfOutput;
import org.openapitools.client.model.CatalysisTankOutput;
import org.openapitools.client.model.CdAdditionRateOutput;
import org.openapitools.client.model.DosingParamSettingDto;
import org.openapitools.client.model.DosingStatisticDailysOutput;
import org.openapitools.client.model.ExecutePlcInput;
import org.openapitools.client.model.RemoteServiceErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IntelligentMccrApi {
    private ApiClient localVarApiClient;

    public IntelligentMccrApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IntelligentMccrApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for apiV2IntelligentMccrAddRatesGet
     * @param productionLine 工艺线代码 product line code (optional)
     * @param category 药剂类型 dosage type (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2IntelligentMccrAddRatesGetCall(String productionLine, Integer category, String startTime, String endTime, String tenantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/intelligent-mccr/add-rates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (productionLine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productionLine", productionLine));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2IntelligentMccrAddRatesGetValidateBeforeCall(String productionLine, Integer category, String startTime, String endTime, String tenantId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiV2IntelligentMccrAddRatesGetCall(productionLine, category, startTime, endTime, tenantId, _callback);
        return localVarCall;

    }

    /**
     * 获取铁催化剂加药，或者双氧水加药的实际投加速率与计算投加速率 Get actual and calculated dosing rate data of iron catalysts or hydrogen peroxide
     * 
     * @param productionLine 工艺线代码 product line code (optional)
     * @param category 药剂类型 dosage type (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @return CdAdditionRateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResult<CdAdditionRateOutput>apiV2IntelligentMccrAddRatesGet(String productionLine, Integer category, String startTime, String endTime, String tenantId) throws ApiException {
        ApiResponse<ApiResult<CdAdditionRateOutput>> localVarResp = apiV2IntelligentMccrAddRatesGetWithHttpInfo(productionLine, category, startTime, endTime, tenantId);
        return localVarResp.getData();
    }

    /**
     * 获取铁催化剂加药，或者双氧水加药的实际投加速率与计算投加速率 Get actual and calculated dosing rate data of iron catalysts or hydrogen peroxide
     * 
     * @param productionLine 工艺线代码 product line code (optional)
     * @param category 药剂类型 dosage type (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @return ApiResponse&lt;CdAdditionRateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<CdAdditionRateOutput>> apiV2IntelligentMccrAddRatesGetWithHttpInfo(String productionLine, Integer category, String startTime, String endTime, String tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiV2IntelligentMccrAddRatesGetValidateBeforeCall(productionLine, category, startTime, endTime, tenantId, null);
        Type localVarReturnType = new TypeToken<ApiResult<CdAdditionRateOutput>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取铁催化剂加药，或者双氧水加药的实际投加速率与计算投加速率 Get actual and calculated dosing rate data of iron catalysts or hydrogen peroxide (asynchronously)
     * 
     * @param productionLine 工艺线代码 product line code (optional)
     * @param category 药剂类型 dosage type (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2IntelligentMccrAddRatesGetAsync(String productionLine, Integer category, String startTime, String endTime, String tenantId, final ApiCallback<CdAdditionRateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2IntelligentMccrAddRatesGetValidateBeforeCall(productionLine, category, startTime, endTime, tenantId, _callback);
        Type localVarReturnType = new TypeToken<CdAdditionRateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2IntelligentMccrCalculateMccrDosagePost
     * @param tenantId  (optional)
     * @param dosingParamSettingDto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2IntelligentMccrCalculateMccrDosagePostCall(String tenantId, List<DosingParamSettingDto> dosingParamSettingDto, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = dosingParamSettingDto;

        // create path and map variables
        String localVarPath = "/api/v2/intelligent-mccr/calculate-mccr-dosage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2IntelligentMccrCalculateMccrDosagePostValidateBeforeCall(String tenantId, List<DosingParamSettingDto> dosingParamSettingDto, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiV2IntelligentMccrCalculateMccrDosagePostCall(tenantId, dosingParamSettingDto, _callback);
        return localVarCall;

    }

    /**
     * 计算指定产线的MCCR加药量 calculate MCCR&#39;s dosage by product line
     * 
     * @param tenantId  (optional)
     * @param dosingParamSettingDto  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResult<Object>apiV2IntelligentMccrCalculateMccrDosagePost(String tenantId, List<DosingParamSettingDto> dosingParamSettingDto) throws ApiException {
        ApiResponse<ApiResult<Object>> localVarResp = apiV2IntelligentMccrCalculateMccrDosagePostWithHttpInfo(tenantId, dosingParamSettingDto);
        return localVarResp.getData();
    }

    /**
     * 计算指定产线的MCCR加药量 calculate MCCR&#39;s dosage by product line
     * 
     * @param tenantId  (optional)
     * @param dosingParamSettingDto  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<Object>> apiV2IntelligentMccrCalculateMccrDosagePostWithHttpInfo(String tenantId, List<DosingParamSettingDto> dosingParamSettingDto) throws ApiException {
        okhttp3.Call localVarCall = apiV2IntelligentMccrCalculateMccrDosagePostValidateBeforeCall(tenantId, dosingParamSettingDto, null);
        Type localVarReturnType = new TypeToken<ApiResult<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 计算指定产线的MCCR加药量 calculate MCCR&#39;s dosage by product line (asynchronously)
     * 
     * @param tenantId  (optional)
     * @param dosingParamSettingDto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2IntelligentMccrCalculateMccrDosagePostAsync(String tenantId, List<DosingParamSettingDto> dosingParamSettingDto, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2IntelligentMccrCalculateMccrDosagePostValidateBeforeCall(tenantId, dosingParamSettingDto, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2IntelligentMccrCatalysisBeforeAfterGet
     * @param productLine  (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2IntelligentMccrCatalysisBeforeAfterGetCall(String productLine, String startTime, String endTime, String tenantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/intelligent-mccr/catalysis-before-after";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (productLine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productLine", productLine));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2IntelligentMccrCatalysisBeforeAfterGetValidateBeforeCall(String productLine, String startTime, String endTime, String tenantId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiV2IntelligentMccrCatalysisBeforeAfterGetCall(productLine, startTime, endTime, tenantId, _callback);
        return localVarCall;

    }

    /**
     * 获取催化反应前后的浊度、电导 Get online turbidity and conductivity data before and after catalysis
     * 
     * @param productLine  (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @return List&lt;CatalysisBfOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResult<List<CatalysisBfOutput>>apiV2IntelligentMccrCatalysisBeforeAfterGet(String productLine, String startTime, String endTime, String tenantId) throws ApiException {
        ApiResponse<ApiResult<List<CatalysisBfOutput>>> localVarResp = apiV2IntelligentMccrCatalysisBeforeAfterGetWithHttpInfo(productLine, startTime, endTime, tenantId);
        return localVarResp.getData();
    }

    /**
     * 获取催化反应前后的浊度、电导 Get online turbidity and conductivity data before and after catalysis
     * 
     * @param productLine  (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @return ApiResponse&lt;List&lt;CatalysisBfOutput&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<List<CatalysisBfOutput>>> apiV2IntelligentMccrCatalysisBeforeAfterGetWithHttpInfo(String productLine, String startTime, String endTime, String tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiV2IntelligentMccrCatalysisBeforeAfterGetValidateBeforeCall(productLine, startTime, endTime, tenantId, null);
        Type localVarReturnType = new TypeToken<ApiResult<List<CatalysisBfOutput>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取催化反应前后的浊度、电导 Get online turbidity and conductivity data before and after catalysis (asynchronously)
     * 
     * @param productLine  (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2IntelligentMccrCatalysisBeforeAfterGetAsync(String productLine, String startTime, String endTime, String tenantId, final ApiCallback<List<CatalysisBfOutput>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2IntelligentMccrCatalysisBeforeAfterGetValidateBeforeCall(productLine, startTime, endTime, tenantId, _callback);
        Type localVarReturnType = new TypeToken<List<CatalysisBfOutput>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2IntelligentMccrCatalysisTankDataGet
     * @param productLine  (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2IntelligentMccrCatalysisTankDataGetCall(String productLine, String startTime, String endTime, String tenantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/intelligent-mccr/catalysis-tank-data";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (productLine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productLine", productLine));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2IntelligentMccrCatalysisTankDataGetValidateBeforeCall(String productLine, String startTime, String endTime, String tenantId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiV2IntelligentMccrCatalysisTankDataGetCall(productLine, startTime, endTime, tenantId, _callback);
        return localVarCall;

    }

    /**
     * 获取催化池的进水量、pH、ORP数据 Get online inflow, pH, ORP data in the catalysis pool
     * 
     * @param productLine  (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @return List&lt;CatalysisTankOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResult<List<CatalysisTankOutput>>apiV2IntelligentMccrCatalysisTankDataGet(String productLine, String startTime, String endTime, String tenantId) throws ApiException {
        ApiResponse<ApiResult<List<CatalysisTankOutput>>> localVarResp = apiV2IntelligentMccrCatalysisTankDataGetWithHttpInfo(productLine, startTime, endTime, tenantId);
        return localVarResp.getData();
    }

    /**
     * 获取催化池的进水量、pH、ORP数据 Get online inflow, pH, ORP data in the catalysis pool
     * 
     * @param productLine  (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @return ApiResponse&lt;List&lt;CatalysisTankOutput&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<List<CatalysisTankOutput>>> apiV2IntelligentMccrCatalysisTankDataGetWithHttpInfo(String productLine, String startTime, String endTime, String tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiV2IntelligentMccrCatalysisTankDataGetValidateBeforeCall(productLine, startTime, endTime, tenantId, null);
        Type localVarReturnType = new TypeToken<ApiResult<List<CatalysisTankOutput>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取催化池的进水量、pH、ORP数据 Get online inflow, pH, ORP data in the catalysis pool (asynchronously)
     * 
     * @param productLine  (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2IntelligentMccrCatalysisTankDataGetAsync(String productLine, String startTime, String endTime, String tenantId, final ApiCallback<List<CatalysisTankOutput>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2IntelligentMccrCatalysisTankDataGetValidateBeforeCall(productLine, startTime, endTime, tenantId, _callback);
        Type localVarReturnType = new TypeToken<List<CatalysisTankOutput>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2IntelligentMccrDailyStatisticsExportGet
     * @param productionLine 工艺线代码 product line code (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2IntelligentMccrDailyStatisticsExportGetCall(String productionLine, String startTime, String endTime, String tenantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/intelligent-mccr/daily-statistics/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (productionLine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productionLine", productionLine));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2IntelligentMccrDailyStatisticsExportGetValidateBeforeCall(String productionLine, String startTime, String endTime, String tenantId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiV2IntelligentMccrDailyStatisticsExportGetCall(productionLine, startTime, endTime, tenantId, _callback);
        return localVarCall;

    }

    /**
     * 指定时间段内加药统计文件导出 Export dosing daily statistic results of a certain period as an excel file
     * 
     * @param productionLine 工艺线代码 product line code (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void apiV2IntelligentMccrDailyStatisticsExportGet(String productionLine, String startTime, String endTime, String tenantId) throws ApiException {
        apiV2IntelligentMccrDailyStatisticsExportGetWithHttpInfo(productionLine, startTime, endTime, tenantId);
    }

    /**
     * 指定时间段内加药统计文件导出 Export dosing daily statistic results of a certain period as an excel file
     * 
     * @param productionLine 工艺线代码 product line code (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<Void>> apiV2IntelligentMccrDailyStatisticsExportGetWithHttpInfo(String productionLine, String startTime, String endTime, String tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiV2IntelligentMccrDailyStatisticsExportGetValidateBeforeCall(productionLine, startTime, endTime, tenantId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * 指定时间段内加药统计文件导出 Export dosing daily statistic results of a certain period as an excel file (asynchronously)
     * 
     * @param productionLine 工艺线代码 product line code (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2IntelligentMccrDailyStatisticsExportGetAsync(String productionLine, String startTime, String endTime, String tenantId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2IntelligentMccrDailyStatisticsExportGetValidateBeforeCall(productionLine, startTime, endTime, tenantId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2IntelligentMccrDailyStatisticsGet
     * @param productionLine 工艺线代码 product line code (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2IntelligentMccrDailyStatisticsGetCall(String productionLine, String startTime, String endTime, String tenantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/intelligent-mccr/daily-statistics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (productionLine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productionLine", productionLine));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2IntelligentMccrDailyStatisticsGetValidateBeforeCall(String productionLine, String startTime, String endTime, String tenantId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiV2IntelligentMccrDailyStatisticsGetCall(productionLine, startTime, endTime, tenantId, _callback);
        return localVarCall;

    }

    /**
     * 指定时间段内加药统计查询 Get dosing daily statistic results of a certain period
     * 
     * @param productionLine 工艺线代码 product line code (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @return List&lt;DosingStatisticDailysOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResult<List<DosingStatisticDailysOutput>>apiV2IntelligentMccrDailyStatisticsGet(String productionLine, String startTime, String endTime, String tenantId) throws ApiException {
        ApiResponse<ApiResult<List<DosingStatisticDailysOutput>>> localVarResp = apiV2IntelligentMccrDailyStatisticsGetWithHttpInfo(productionLine, startTime, endTime, tenantId);
        return localVarResp.getData();
    }

    /**
     * 指定时间段内加药统计查询 Get dosing daily statistic results of a certain period
     * 
     * @param productionLine 工艺线代码 product line code (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @return ApiResponse&lt;List&lt;DosingStatisticDailysOutput&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<List<DosingStatisticDailysOutput>>> apiV2IntelligentMccrDailyStatisticsGetWithHttpInfo(String productionLine, String startTime, String endTime, String tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiV2IntelligentMccrDailyStatisticsGetValidateBeforeCall(productionLine, startTime, endTime, tenantId, null);
        Type localVarReturnType = new TypeToken<ApiResult<List<DosingStatisticDailysOutput>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 指定时间段内加药统计查询 Get dosing daily statistic results of a certain period (asynchronously)
     * 
     * @param productionLine 工艺线代码 product line code (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2IntelligentMccrDailyStatisticsGetAsync(String productionLine, String startTime, String endTime, String tenantId, final ApiCallback<List<DosingStatisticDailysOutput>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2IntelligentMccrDailyStatisticsGetValidateBeforeCall(productionLine, startTime, endTime, tenantId, _callback);
        Type localVarReturnType = new TypeToken<List<DosingStatisticDailysOutput>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2IntelligentMccrDosingLogExportGet
     * @param productionLine 工艺线代码 product line code (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2IntelligentMccrDosingLogExportGetCall(String productionLine, String startTime, String endTime, String tenantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/intelligent-mccr/dosing-log/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (productionLine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productionLine", productionLine));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2IntelligentMccrDosingLogExportGetValidateBeforeCall(String productionLine, String startTime, String endTime, String tenantId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiV2IntelligentMccrDosingLogExportGetCall(productionLine, startTime, endTime, tenantId, _callback);
        return localVarCall;

    }

    /**
     * 指定时间段内加药报表文件导出 Export dosing logs of a certain period as an excel file
     * 
     * @param productionLine 工艺线代码 product line code (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void apiV2IntelligentMccrDosingLogExportGet(String productionLine, String startTime, String endTime, String tenantId) throws ApiException {
        apiV2IntelligentMccrDosingLogExportGetWithHttpInfo(productionLine, startTime, endTime, tenantId);
    }

    /**
     * 指定时间段内加药报表文件导出 Export dosing logs of a certain period as an excel file
     * 
     * @param productionLine 工艺线代码 product line code (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<Void>> apiV2IntelligentMccrDosingLogExportGetWithHttpInfo(String productionLine, String startTime, String endTime, String tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiV2IntelligentMccrDosingLogExportGetValidateBeforeCall(productionLine, startTime, endTime, tenantId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * 指定时间段内加药报表文件导出 Export dosing logs of a certain period as an excel file (asynchronously)
     * 
     * @param productionLine 工艺线代码 product line code (optional)
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param tenantId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2IntelligentMccrDosingLogExportGetAsync(String productionLine, String startTime, String endTime, String tenantId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2IntelligentMccrDosingLogExportGetValidateBeforeCall(productionLine, startTime, endTime, tenantId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2IntelligentMccrPlcControlByProductLinePost
     * @param tenantId  (optional)
     * @param executePlcInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2IntelligentMccrPlcControlByProductLinePostCall(String tenantId, ExecutePlcInput executePlcInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = executePlcInput;

        // create path and map variables
        String localVarPath = "/api/v2/intelligent-mccr/plc-control-by-product-line";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2IntelligentMccrPlcControlByProductLinePostValidateBeforeCall(String tenantId, ExecutePlcInput executePlcInput, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiV2IntelligentMccrPlcControlByProductLinePostCall(tenantId, executePlcInput, _callback);
        return localVarCall;

    }

    /**
     * 执行指定产线的MCCR加药plc控制，同时写入加药日志 Execute MCCR dosing plc control and write dosing logs for one product line
     * 
     * @param tenantId  (optional)
     * @param executePlcInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResult<Object>apiV2IntelligentMccrPlcControlByProductLinePost(String tenantId, ExecutePlcInput executePlcInput) throws ApiException {
        ApiResponse<ApiResult<Object>> localVarResp = apiV2IntelligentMccrPlcControlByProductLinePostWithHttpInfo(tenantId, executePlcInput);
        return localVarResp.getData();
    }

    /**
     * 执行指定产线的MCCR加药plc控制，同时写入加药日志 Execute MCCR dosing plc control and write dosing logs for one product line
     * 
     * @param tenantId  (optional)
     * @param executePlcInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<Object>> apiV2IntelligentMccrPlcControlByProductLinePostWithHttpInfo(String tenantId, ExecutePlcInput executePlcInput) throws ApiException {
        okhttp3.Call localVarCall = apiV2IntelligentMccrPlcControlByProductLinePostValidateBeforeCall(tenantId, executePlcInput, null);
        Type localVarReturnType = new TypeToken<ApiResult<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 执行指定产线的MCCR加药plc控制，同时写入加药日志 Execute MCCR dosing plc control and write dosing logs for one product line (asynchronously)
     * 
     * @param tenantId  (optional)
     * @param executePlcInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2IntelligentMccrPlcControlByProductLinePostAsync(String tenantId, ExecutePlcInput executePlcInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2IntelligentMccrPlcControlByProductLinePostValidateBeforeCall(tenantId, executePlcInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2IntelligentMccrPlcControlGet
     * @param currentTime 当前时刻 current time (optional)
     * @param tenantId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2IntelligentMccrPlcControlGetCall(String currentTime, String tenantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/intelligent-mccr/plc-control";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currentTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currentTime", currentTime));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2IntelligentMccrPlcControlGetValidateBeforeCall(String currentTime, String tenantId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiV2IntelligentMccrPlcControlGetCall(currentTime, tenantId, _callback);
        return localVarCall;

    }

    /**
     * 执行MCCR加药plc控制，同时写入加药日志 Execute MCCR dosing plc control and write dosing logs
     * 
     * @param currentTime 当前时刻 current time (optional)
     * @param tenantId  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResult<Object>apiV2IntelligentMccrPlcControlGet(String currentTime, String tenantId) throws ApiException {
        ApiResponse<ApiResult<Object>> localVarResp = apiV2IntelligentMccrPlcControlGetWithHttpInfo(currentTime, tenantId);
        return localVarResp.getData();
    }

    /**
     * 执行MCCR加药plc控制，同时写入加药日志 Execute MCCR dosing plc control and write dosing logs
     * 
     * @param currentTime 当前时刻 current time (optional)
     * @param tenantId  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<Object>> apiV2IntelligentMccrPlcControlGetWithHttpInfo(String currentTime, String tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiV2IntelligentMccrPlcControlGetValidateBeforeCall(currentTime, tenantId, null);
        Type localVarReturnType = new TypeToken<ApiResult<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 执行MCCR加药plc控制，同时写入加药日志 Execute MCCR dosing plc control and write dosing logs (asynchronously)
     * 
     * @param currentTime 当前时刻 current time (optional)
     * @param tenantId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2IntelligentMccrPlcControlGetAsync(String currentTime, String tenantId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2IntelligentMccrPlcControlGetValidateBeforeCall(currentTime, tenantId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
