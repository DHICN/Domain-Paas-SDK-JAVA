/*
 * 污水业务中台领域服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ControlOnlinePointOutput;
import org.openapitools.client.model.MicroOrganismOutput;
import org.openapitools.client.model.RemoteServiceErrorResponse;
import org.openapitools.client.model.UpdateWqInputDataInput;
import org.openapitools.client.model.WqOnlineDataInput;
import org.openapitools.client.model.WqOnlineDataOutput;
import org.openapitools.client.model.WqOnlinePointOutput;
import org.openapitools.client.model.WqStatisticOutput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WqAnalysisApi {
    private ApiClient localVarApiClient;

    public WqAnalysisApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WqAnalysisApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for apiV2WqAnalysisControlOnlinePointsGet
     * @param modelName 模型名称 template model name (optional)
     * @param productLine 工艺线 product line code (optional)
     * @param tenantId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2WqAnalysisControlOnlinePointsGetCall(String modelName, String productLine, String tenantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/wq-analysis/control-online-points";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (modelName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modelName", modelName));
        }

        if (productLine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productLine", productLine));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2WqAnalysisControlOnlinePointsGetValidateBeforeCall(String modelName, String productLine, String tenantId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiV2WqAnalysisControlOnlinePointsGetCall(modelName, productLine, tenantId, _callback);
        return localVarCall;

    }

    /**
     * 查询特定工艺线下的工艺运行输入点位 Get online control points detailed information on a certain product line
     * 
     * @param modelName 模型名称 template model name (optional)
     * @param productLine 工艺线 product line code (optional)
     * @param tenantId  (optional)
     * @return ControlOnlinePointOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResult<ControlOnlinePointOutput>apiV2WqAnalysisControlOnlinePointsGet(String modelName, String productLine, String tenantId) throws ApiException {
        ApiResponse<ApiResult<ControlOnlinePointOutput>> localVarResp = apiV2WqAnalysisControlOnlinePointsGetWithHttpInfo(modelName, productLine, tenantId);
        return localVarResp.getData();
    }

    /**
     * 查询特定工艺线下的工艺运行输入点位 Get online control points detailed information on a certain product line
     * 
     * @param modelName 模型名称 template model name (optional)
     * @param productLine 工艺线 product line code (optional)
     * @param tenantId  (optional)
     * @return ApiResponse&lt;ControlOnlinePointOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<ControlOnlinePointOutput>> apiV2WqAnalysisControlOnlinePointsGetWithHttpInfo(String modelName, String productLine, String tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiV2WqAnalysisControlOnlinePointsGetValidateBeforeCall(modelName, productLine, tenantId, null);
        Type localVarReturnType = new TypeToken<ApiResult<ControlOnlinePointOutput>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 查询特定工艺线下的工艺运行输入点位 Get online control points detailed information on a certain product line (asynchronously)
     * 
     * @param modelName 模型名称 template model name (optional)
     * @param productLine 工艺线 product line code (optional)
     * @param tenantId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2WqAnalysisControlOnlinePointsGetAsync(String modelName, String productLine, String tenantId, final ApiCallback<ControlOnlinePointOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2WqAnalysisControlOnlinePointsGetValidateBeforeCall(modelName, productLine, tenantId, _callback);
        Type localVarReturnType = new TypeToken<ControlOnlinePointOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2WqAnalysisEntireProcessGet
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param modelName 模型名称 template model name (optional)
     * @param productLine 工艺线 product line code (optional)
     * @param tenantId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2WqAnalysisEntireProcessGetCall(String startTime, String endTime, String modelName, String productLine, String tenantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/wq-analysis/entire-process";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (modelName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modelName", modelName));
        }

        if (productLine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productLine", productLine));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2WqAnalysisEntireProcessGetValidateBeforeCall(String startTime, String endTime, String modelName, String productLine, String tenantId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiV2WqAnalysisEntireProcessGetCall(startTime, endTime, modelName, productLine, tenantId, _callback);
        return localVarCall;

    }

    /**
     * 查询水质全流程统计数据 Get water quality entire process statistic data
     * 查询指定时间段内，单条工艺线上每个生化池的各个水质指标统计结果，包括最大值，最小值，平均值，以及实测值 Get water quality indicators&#39; statistic results including maximum, minimum, average value and online value of each biochemical pool on a certain product line of a specified time period.
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param modelName 模型名称 template model name (optional)
     * @param productLine 工艺线 product line code (optional)
     * @param tenantId  (optional)
     * @return List&lt;WqStatisticOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResult<List<WqStatisticOutput>>apiV2WqAnalysisEntireProcessGet(String startTime, String endTime, String modelName, String productLine, String tenantId) throws ApiException {
        ApiResponse<ApiResult<List<WqStatisticOutput>>> localVarResp = apiV2WqAnalysisEntireProcessGetWithHttpInfo(startTime, endTime, modelName, productLine, tenantId);
        return localVarResp.getData();
    }

    /**
     * 查询水质全流程统计数据 Get water quality entire process statistic data
     * 查询指定时间段内，单条工艺线上每个生化池的各个水质指标统计结果，包括最大值，最小值，平均值，以及实测值 Get water quality indicators&#39; statistic results including maximum, minimum, average value and online value of each biochemical pool on a certain product line of a specified time period.
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param modelName 模型名称 template model name (optional)
     * @param productLine 工艺线 product line code (optional)
     * @param tenantId  (optional)
     * @return ApiResponse&lt;List&lt;WqStatisticOutput&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<List<WqStatisticOutput>>> apiV2WqAnalysisEntireProcessGetWithHttpInfo(String startTime, String endTime, String modelName, String productLine, String tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiV2WqAnalysisEntireProcessGetValidateBeforeCall(startTime, endTime, modelName, productLine, tenantId, null);
        Type localVarReturnType = new TypeToken<ApiResult<List<WqStatisticOutput>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 查询水质全流程统计数据 Get water quality entire process statistic data (asynchronously)
     * 查询指定时间段内，单条工艺线上每个生化池的各个水质指标统计结果，包括最大值，最小值，平均值，以及实测值 Get water quality indicators&#39; statistic results including maximum, minimum, average value and online value of each biochemical pool on a certain product line of a specified time period.
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param modelName 模型名称 template model name (optional)
     * @param productLine 工艺线 product line code (optional)
     * @param tenantId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2WqAnalysisEntireProcessGetAsync(String startTime, String endTime, String modelName, String productLine, String tenantId, final ApiCallback<List<WqStatisticOutput>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2WqAnalysisEntireProcessGetValidateBeforeCall(startTime, endTime, modelName, productLine, tenantId, _callback);
        Type localVarReturnType = new TypeToken<List<WqStatisticOutput>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2WqAnalysisWqOnlineDataPost
     * @param tenantId  (optional)
     * @param wqOnlineDataInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2WqAnalysisWqOnlineDataPostCall(String tenantId, WqOnlineDataInput wqOnlineDataInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = wqOnlineDataInput;

        // create path and map variables
        String localVarPath = "/api/v2/wq-analysis/wq-online-data";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2WqAnalysisWqOnlineDataPostValidateBeforeCall(String tenantId, WqOnlineDataInput wqOnlineDataInput, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiV2WqAnalysisWqOnlineDataPostCall(tenantId, wqOnlineDataInput, _callback);
        return localVarCall;

    }

    /**
     * 查询在线点位时间序列数据 Get online water quality or control data
     * 
     * @param tenantId  (optional)
     * @param wqOnlineDataInput  (optional)
     * @return List&lt;WqOnlineDataOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResult<List<WqOnlineDataOutput>>apiV2WqAnalysisWqOnlineDataPost(String tenantId, WqOnlineDataInput wqOnlineDataInput) throws ApiException {
        ApiResponse<ApiResult<List<WqOnlineDataOutput>>> localVarResp = apiV2WqAnalysisWqOnlineDataPostWithHttpInfo(tenantId, wqOnlineDataInput);
        return localVarResp.getData();
    }

    /**
     * 查询在线点位时间序列数据 Get online water quality or control data
     * 
     * @param tenantId  (optional)
     * @param wqOnlineDataInput  (optional)
     * @return ApiResponse&lt;List&lt;WqOnlineDataOutput&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<List<WqOnlineDataOutput>>> apiV2WqAnalysisWqOnlineDataPostWithHttpInfo(String tenantId, WqOnlineDataInput wqOnlineDataInput) throws ApiException {
        okhttp3.Call localVarCall = apiV2WqAnalysisWqOnlineDataPostValidateBeforeCall(tenantId, wqOnlineDataInput, null);
        Type localVarReturnType = new TypeToken<ApiResult<List<WqOnlineDataOutput>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 查询在线点位时间序列数据 Get online water quality or control data (asynchronously)
     * 
     * @param tenantId  (optional)
     * @param wqOnlineDataInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2WqAnalysisWqOnlineDataPostAsync(String tenantId, WqOnlineDataInput wqOnlineDataInput, final ApiCallback<List<WqOnlineDataOutput>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2WqAnalysisWqOnlineDataPostValidateBeforeCall(tenantId, wqOnlineDataInput, _callback);
        Type localVarReturnType = new TypeToken<List<WqOnlineDataOutput>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2WqAnalysisWqOnlinePointsGet
     * @param modelName 模型名称 template model name (optional)
     * @param tenantId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2WqAnalysisWqOnlinePointsGetCall(String modelName, String tenantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/wq-analysis/wq-online-points";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (modelName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modelName", modelName));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2WqAnalysisWqOnlinePointsGetValidateBeforeCall(String modelName, String tenantId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiV2WqAnalysisWqOnlinePointsGetCall(modelName, tenantId, _callback);
        return localVarCall;

    }

    /**
     * 查询水质输入点位信息 Get online water quality points detailed information
     * 
     * @param modelName 模型名称 template model name (optional)
     * @param tenantId  (optional)
     * @return List&lt;WqOnlinePointOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResult<List<WqOnlinePointOutput>>apiV2WqAnalysisWqOnlinePointsGet(String modelName, String tenantId) throws ApiException {
        ApiResponse<ApiResult<List<WqOnlinePointOutput>>> localVarResp = apiV2WqAnalysisWqOnlinePointsGetWithHttpInfo(modelName, tenantId);
        return localVarResp.getData();
    }

    /**
     * 查询水质输入点位信息 Get online water quality points detailed information
     * 
     * @param modelName 模型名称 template model name (optional)
     * @param tenantId  (optional)
     * @return ApiResponse&lt;List&lt;WqOnlinePointOutput&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<List<WqOnlinePointOutput>>> apiV2WqAnalysisWqOnlinePointsGetWithHttpInfo(String modelName, String tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiV2WqAnalysisWqOnlinePointsGetValidateBeforeCall(modelName, tenantId, null);
        Type localVarReturnType = new TypeToken<ApiResult<List<WqOnlinePointOutput>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 查询水质输入点位信息 Get online water quality points detailed information (asynchronously)
     * 
     * @param modelName 模型名称 template model name (optional)
     * @param tenantId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2WqAnalysisWqOnlinePointsGetAsync(String modelName, String tenantId, final ApiCallback<List<WqOnlinePointOutput>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2WqAnalysisWqOnlinePointsGetValidateBeforeCall(modelName, tenantId, _callback);
        Type localVarReturnType = new TypeToken<List<WqOnlinePointOutput>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiWQAnalysisUpdateWQInputDataPost
     * @param tenantId  (optional)
     * @param updateWqInputDataInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWQAnalysisUpdateWQInputDataPostCall(String tenantId, List<UpdateWqInputDataInput> updateWqInputDataInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateWqInputDataInput;

        // create path and map variables
        String localVarPath = "/api/WQAnalysis/UpdateWQInputData";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiWQAnalysisUpdateWQInputDataPostValidateBeforeCall(String tenantId, List<UpdateWqInputDataInput> updateWqInputDataInput, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiWQAnalysisUpdateWQInputDataPostCall(tenantId, updateWqInputDataInput, _callback);
        return localVarCall;

    }

    /**
     * 更新在线水质或控制点数据 Update online water quality or control data
     * 
     * @param tenantId  (optional)
     * @param updateWqInputDataInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResult<Object>apiWQAnalysisUpdateWQInputDataPost(String tenantId, List<UpdateWqInputDataInput> updateWqInputDataInput) throws ApiException {
        ApiResponse<ApiResult<Object>> localVarResp = apiWQAnalysisUpdateWQInputDataPostWithHttpInfo(tenantId, updateWqInputDataInput);
        return localVarResp.getData();
    }

    /**
     * 更新在线水质或控制点数据 Update online water quality or control data
     * 
     * @param tenantId  (optional)
     * @param updateWqInputDataInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<Object>> apiWQAnalysisUpdateWQInputDataPostWithHttpInfo(String tenantId, List<UpdateWqInputDataInput> updateWqInputDataInput) throws ApiException {
        okhttp3.Call localVarCall = apiWQAnalysisUpdateWQInputDataPostValidateBeforeCall(tenantId, updateWqInputDataInput, null);
        Type localVarReturnType = new TypeToken<ApiResult<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 更新在线水质或控制点数据 Update online water quality or control data (asynchronously)
     * 
     * @param tenantId  (optional)
     * @param updateWqInputDataInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWQAnalysisUpdateWQInputDataPostAsync(String tenantId, List<UpdateWqInputDataInput> updateWqInputDataInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiWQAnalysisUpdateWQInputDataPostValidateBeforeCall(tenantId, updateWqInputDataInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2WqAnalysisMicroOrganismGet
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param modelName 模型名称 template model name (optional)
     * @param productLine 工艺线 product line code (optional)
     * @param tenantId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2WqAnalysisMicroOrganismGetCall(String startTime, String endTime, String modelName, String productLine, String tenantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/wq-analysis/micro-organism";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (modelName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modelName", modelName));
        }

        if (productLine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productLine", productLine));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2WqAnalysisMicroOrganismGetValidateBeforeCall(String startTime, String endTime, String modelName, String productLine, String tenantId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = v2WqAnalysisMicroOrganismGetCall(startTime, endTime, modelName, productLine, tenantId, _callback);
        return localVarCall;

    }

    /**
     * 获取微生物生长模拟结果 Get microbial growth simulation results
     * 获取指定时间段内，单条工艺线上的微生物生长模拟结果 Get microbial growth simulation results on a certain product line of a specified time period.
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param modelName 模型名称 template model name (optional)
     * @param productLine 工艺线 product line code (optional)
     * @param tenantId  (optional)
     * @return List&lt;MicroOrganismOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResult<List<MicroOrganismOutput>>v2WqAnalysisMicroOrganismGet(String startTime, String endTime, String modelName, String productLine, String tenantId) throws ApiException {
        ApiResponse<ApiResult<List<MicroOrganismOutput>>> localVarResp = v2WqAnalysisMicroOrganismGetWithHttpInfo(startTime, endTime, modelName, productLine, tenantId);
        return localVarResp.getData();
    }

    /**
     * 获取微生物生长模拟结果 Get microbial growth simulation results
     * 获取指定时间段内，单条工艺线上的微生物生长模拟结果 Get microbial growth simulation results on a certain product line of a specified time period.
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param modelName 模型名称 template model name (optional)
     * @param productLine 工艺线 product line code (optional)
     * @param tenantId  (optional)
     * @return ApiResponse&lt;List&lt;MicroOrganismOutput&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<List<MicroOrganismOutput>>> v2WqAnalysisMicroOrganismGetWithHttpInfo(String startTime, String endTime, String modelName, String productLine, String tenantId) throws ApiException {
        okhttp3.Call localVarCall = v2WqAnalysisMicroOrganismGetValidateBeforeCall(startTime, endTime, modelName, productLine, tenantId, null);
        Type localVarReturnType = new TypeToken<ApiResult<List<MicroOrganismOutput>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取微生物生长模拟结果 Get microbial growth simulation results (asynchronously)
     * 获取指定时间段内，单条工艺线上的微生物生长模拟结果 Get microbial growth simulation results on a certain product line of a specified time period.
     * @param startTime 开始时间 start time (optional)
     * @param endTime 结束时间 end time (optional)
     * @param modelName 模型名称 template model name (optional)
     * @param productLine 工艺线 product line code (optional)
     * @param tenantId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2WqAnalysisMicroOrganismGetAsync(String startTime, String endTime, String modelName, String productLine, String tenantId, final ApiCallback<List<MicroOrganismOutput>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2WqAnalysisMicroOrganismGetValidateBeforeCall(startTime, endTime, modelName, productLine, tenantId, _callback);
        Type localVarReturnType = new TypeToken<List<MicroOrganismOutput>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
