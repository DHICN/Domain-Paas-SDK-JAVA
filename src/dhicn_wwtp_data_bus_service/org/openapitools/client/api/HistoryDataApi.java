/*
 * 污水业务中台领域服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.QueryByConditionInput;
import org.openapitools.client.model.RemoteServiceErrorResponse;
import org.openapitools.client.model.SelectItemNode;
import org.openapitools.client.model.TsDataOutput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HistoryDataApi {
    private ApiClient localVarApiClient;

    public HistoryDataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HistoryDataApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for apiV2HistoryDataExportPost
     * @param tenantId  (optional)
     * @param queryByConditionInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2HistoryDataExportPostCall(String tenantId, QueryByConditionInput queryByConditionInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = queryByConditionInput;

        // create path and map variables
        String localVarPath = "/api/v2/history-data/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2HistoryDataExportPostValidateBeforeCall(String tenantId, QueryByConditionInput queryByConditionInput, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiV2HistoryDataExportPostCall(tenantId, queryByConditionInput, _callback);
        return localVarCall;

    }

    /**
     * 导出清洗后的在线数据，模拟结果数据 Export processed online data or model result data as an excel file
     * 
     * @param tenantId  (optional)
     * @param queryByConditionInput  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void apiV2HistoryDataExportPost(String tenantId, QueryByConditionInput queryByConditionInput) throws ApiException {
        apiV2HistoryDataExportPostWithHttpInfo(tenantId, queryByConditionInput);
    }

    /**
     * 导出清洗后的在线数据，模拟结果数据 Export processed online data or model result data as an excel file
     * 
     * @param tenantId  (optional)
     * @param queryByConditionInput  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<Void>> apiV2HistoryDataExportPostWithHttpInfo(String tenantId, QueryByConditionInput queryByConditionInput) throws ApiException {
        okhttp3.Call localVarCall = apiV2HistoryDataExportPostValidateBeforeCall(tenantId, queryByConditionInput, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * 导出清洗后的在线数据，模拟结果数据 Export processed online data or model result data as an excel file (asynchronously)
     * 
     * @param tenantId  (optional)
     * @param queryByConditionInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2HistoryDataExportPostAsync(String tenantId, QueryByConditionInput queryByConditionInput, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2HistoryDataExportPostValidateBeforeCall(tenantId, queryByConditionInput, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2HistoryDataGetByConditionPost
     * @param tenantId  (optional)
     * @param queryByConditionInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2HistoryDataGetByConditionPostCall(String tenantId, QueryByConditionInput queryByConditionInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = queryByConditionInput;

        // create path and map variables
        String localVarPath = "/api/v2/history-data/get-by-condition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2HistoryDataGetByConditionPostValidateBeforeCall(String tenantId, QueryByConditionInput queryByConditionInput, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiV2HistoryDataGetByConditionPostCall(tenantId, queryByConditionInput, _callback);
        return localVarCall;

    }

    /**
     * 根据时间段和点位代码查询清洗后的在线数据和模拟结果数据 Get processed online data or model result data by time and codes
     * 
     * @param tenantId  (optional)
     * @param queryByConditionInput  (optional)
     * @return List&lt;TsDataOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResult<List<TsDataOutput>>apiV2HistoryDataGetByConditionPost(String tenantId, QueryByConditionInput queryByConditionInput) throws ApiException {
        ApiResponse<ApiResult<List<TsDataOutput>>> localVarResp = apiV2HistoryDataGetByConditionPostWithHttpInfo(tenantId, queryByConditionInput);
        return localVarResp.getData();
    }

    /**
     * 根据时间段和点位代码查询清洗后的在线数据和模拟结果数据 Get processed online data or model result data by time and codes
     * 
     * @param tenantId  (optional)
     * @param queryByConditionInput  (optional)
     * @return ApiResponse&lt;List&lt;TsDataOutput&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<List<TsDataOutput>>> apiV2HistoryDataGetByConditionPostWithHttpInfo(String tenantId, QueryByConditionInput queryByConditionInput) throws ApiException {
        okhttp3.Call localVarCall = apiV2HistoryDataGetByConditionPostValidateBeforeCall(tenantId, queryByConditionInput, null);
        Type localVarReturnType = new TypeToken<ApiResult<List<TsDataOutput>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据时间段和点位代码查询清洗后的在线数据和模拟结果数据 Get processed online data or model result data by time and codes (asynchronously)
     * 
     * @param tenantId  (optional)
     * @param queryByConditionInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2HistoryDataGetByConditionPostAsync(String tenantId, QueryByConditionInput queryByConditionInput, final ApiCallback<List<TsDataOutput>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2HistoryDataGetByConditionPostValidateBeforeCall(tenantId, queryByConditionInput, _callback);
        Type localVarReturnType = new TypeToken<List<TsDataOutput>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2HistoryDataSelectItemsGet
     * @param modelName 模板模型名称 template model name (optional)
     * @param tenantId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2HistoryDataSelectItemsGetCall(String modelName, String tenantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/history-data/select-items";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (modelName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modelName", modelName));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2HistoryDataSelectItemsGetValidateBeforeCall(String modelName, String tenantId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiV2HistoryDataSelectItemsGetCall(modelName, tenantId, _callback);
        return localVarCall;

    }

    /**
     * 获取指标查询的可选择项的具体信息 Get all the historical data indicators for selection on the front end
     * 
     * @param modelName 模板模型名称 template model name (optional)
     * @param tenantId  (optional)
     * @return List&lt;SelectItemNode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResult<List<SelectItemNode>>apiV2HistoryDataSelectItemsGet(String modelName, String tenantId) throws ApiException {
        ApiResponse<ApiResult<List<SelectItemNode>>> localVarResp = apiV2HistoryDataSelectItemsGetWithHttpInfo(modelName, tenantId);
        return localVarResp.getData();
    }

    /**
     * 获取指标查询的可选择项的具体信息 Get all the historical data indicators for selection on the front end
     * 
     * @param modelName 模板模型名称 template model name (optional)
     * @param tenantId  (optional)
     * @return ApiResponse&lt;List&lt;SelectItemNode&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<List<SelectItemNode>>> apiV2HistoryDataSelectItemsGetWithHttpInfo(String modelName, String tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiV2HistoryDataSelectItemsGetValidateBeforeCall(modelName, tenantId, null);
        Type localVarReturnType = new TypeToken<ApiResult<List<SelectItemNode>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取指标查询的可选择项的具体信息 Get all the historical data indicators for selection on the front end (asynchronously)
     * 
     * @param modelName 模板模型名称 template model name (optional)
     * @param tenantId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2HistoryDataSelectItemsGetAsync(String modelName, String tenantId, final ApiCallback<List<SelectItemNode>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2HistoryDataSelectItemsGetValidateBeforeCall(modelName, tenantId, _callback);
        Type localVarReturnType = new TypeToken<List<SelectItemNode>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
