/*
 * 污水业务中台领域服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import org.openapitools.client.model.RemoteServiceErrorResponse;
import org.openapitools.client.model.StringListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ImportExportApi {
    private ApiClient localVarApiClient;

    public ImportExportApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ImportExportApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for apiV2ConfigExportConfigExcelGet
     * @param tenantId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2ConfigExportConfigExcelGetCall(String tenantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/config/export-config-excel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2ConfigExportConfigExcelGetValidateBeforeCall(String tenantId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiV2ConfigExportConfigExcelGetCall(tenantId, _callback);
        return localVarCall;

    }

    /**
     * 导出配置文件Excel / Export config Excel
     * 
     * @param tenantId  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void apiV2ConfigExportConfigExcelGet(String tenantId) throws ApiException {
        apiV2ConfigExportConfigExcelGetWithHttpInfo(tenantId);
    }

    /**
     * 导出配置文件Excel / Export config Excel
     * 
     * @param tenantId  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<Void>> apiV2ConfigExportConfigExcelGetWithHttpInfo(String tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiV2ConfigExportConfigExcelGetValidateBeforeCall(tenantId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * 导出配置文件Excel / Export config Excel (asynchronously)
     * 
     * @param tenantId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2ConfigExportConfigExcelGetAsync(String tenantId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2ConfigExportConfigExcelGetValidateBeforeCall(tenantId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2ConfigImportConfigExcelPost
     * @param tenantId  (optional)
     * @param excelFile  (optional)
     * @param sheets 更新的sheet页的编码，如（1,2,3表示更新sheet1，2，3中的配置），以表示需要更新哪个页的配置，其余页面不更新；如该参数为空，则表示全部更新 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2ConfigImportConfigExcelPostCall(String tenantId, File excelFile, String sheets, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/config/import-config-excel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (excelFile != null) {
            localVarFormParams.put("ExcelFile", excelFile);
        }

        if (sheets != null) {
            localVarFormParams.put("Sheets", sheets);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2ConfigImportConfigExcelPostValidateBeforeCall(String tenantId, File excelFile, String sheets, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiV2ConfigImportConfigExcelPostCall(tenantId, excelFile, sheets, _callback);
        return localVarCall;

    }

    /**
     * 导入业务服务配置文件Excel / Import config Excel
     * 
     * @param tenantId  (optional)
     * @param excelFile  (optional)
     * @param sheets 更新的sheet页的编码，如（1,2,3表示更新sheet1，2，3中的配置），以表示需要更新哪个页的配置，其余页面不更新；如该参数为空，则表示全部更新 (optional)
     * @return StringListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResult<StringListResult>apiV2ConfigImportConfigExcelPost(String tenantId, File excelFile, String sheets) throws ApiException {
        ApiResponse<ApiResult<StringListResult>> localVarResp = apiV2ConfigImportConfigExcelPostWithHttpInfo(tenantId, excelFile, sheets);
        return localVarResp.getData();
    }

    /**
     * 导入业务服务配置文件Excel / Import config Excel
     * 
     * @param tenantId  (optional)
     * @param excelFile  (optional)
     * @param sheets 更新的sheet页的编码，如（1,2,3表示更新sheet1，2，3中的配置），以表示需要更新哪个页的配置，其余页面不更新；如该参数为空，则表示全部更新 (optional)
     * @return ApiResponse&lt;StringListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<StringListResult>> apiV2ConfigImportConfigExcelPostWithHttpInfo(String tenantId, File excelFile, String sheets) throws ApiException {
        okhttp3.Call localVarCall = apiV2ConfigImportConfigExcelPostValidateBeforeCall(tenantId, excelFile, sheets, null);
        Type localVarReturnType = new TypeToken<ApiResult<StringListResult>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 导入业务服务配置文件Excel / Import config Excel (asynchronously)
     * 
     * @param tenantId  (optional)
     * @param excelFile  (optional)
     * @param sheets 更新的sheet页的编码，如（1,2,3表示更新sheet1，2，3中的配置），以表示需要更新哪个页的配置，其余页面不更新；如该参数为空，则表示全部更新 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2ConfigImportConfigExcelPostAsync(String tenantId, File excelFile, String sheets, final ApiCallback<StringListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2ConfigImportConfigExcelPostValidateBeforeCall(tenantId, excelFile, sheets, _callback);
        Type localVarReturnType = new TypeToken<StringListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
