/*
 * 污水业务中台领域服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DosingParamSettingDto;
import org.openapitools.client.model.RemoteServiceErrorResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DosingParamSettingApi {
    private ApiClient localVarApiClient;

    public DosingParamSettingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DosingParamSettingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for apiDosingParamSettingAddDosingParamSettingsPost
     * @param tenantId  (optional)
     * @param dosingParamSettingDto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDosingParamSettingAddDosingParamSettingsPostCall(String tenantId, List<DosingParamSettingDto> dosingParamSettingDto, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = dosingParamSettingDto;

        // create path and map variables
        String localVarPath = "/api/DosingParamSetting/AddDosingParamSettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDosingParamSettingAddDosingParamSettingsPostValidateBeforeCall(String tenantId, List<DosingParamSettingDto> dosingParamSettingDto, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiDosingParamSettingAddDosingParamSettingsPostCall(tenantId, dosingParamSettingDto, _callback);
        return localVarCall;

    }

    /**
     * 添加加药参数设置信息 Add dosing parameter setting data
     * 
     * @param tenantId  (optional)
     * @param dosingParamSettingDto  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResult<Object>apiDosingParamSettingAddDosingParamSettingsPost(String tenantId, List<DosingParamSettingDto> dosingParamSettingDto) throws ApiException {
        ApiResponse<ApiResult<Object>> localVarResp = apiDosingParamSettingAddDosingParamSettingsPostWithHttpInfo(tenantId, dosingParamSettingDto);
        return localVarResp.getData();
    }

    /**
     * 添加加药参数设置信息 Add dosing parameter setting data
     * 
     * @param tenantId  (optional)
     * @param dosingParamSettingDto  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<Object>> apiDosingParamSettingAddDosingParamSettingsPostWithHttpInfo(String tenantId, List<DosingParamSettingDto> dosingParamSettingDto) throws ApiException {
        okhttp3.Call localVarCall = apiDosingParamSettingAddDosingParamSettingsPostValidateBeforeCall(tenantId, dosingParamSettingDto, null);
        Type localVarReturnType = new TypeToken<ApiResult<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 添加加药参数设置信息 Add dosing parameter setting data (asynchronously)
     * 
     * @param tenantId  (optional)
     * @param dosingParamSettingDto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDosingParamSettingAddDosingParamSettingsPostAsync(String tenantId, List<DosingParamSettingDto> dosingParamSettingDto, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDosingParamSettingAddDosingParamSettingsPostValidateBeforeCall(tenantId, dosingParamSettingDto, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiDosingParamSettingDeleteDosingParamSettingsPost
     * @param tenantId  (optional)
     * @param UUID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDosingParamSettingDeleteDosingParamSettingsPostCall(String tenantId, List<UUID> UUID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UUID;

        // create path and map variables
        String localVarPath = "/api/DosingParamSetting/DeleteDosingParamSettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDosingParamSettingDeleteDosingParamSettingsPostValidateBeforeCall(String tenantId, List<UUID> UUID, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiDosingParamSettingDeleteDosingParamSettingsPostCall(tenantId, UUID, _callback);
        return localVarCall;

    }

    /**
     * 根据ID删除加药参数设置信息 Delete dosing parameter setting data by ids
     * 
     * @param tenantId  (optional)
     * @param UUID  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResult<Object>apiDosingParamSettingDeleteDosingParamSettingsPost(String tenantId, List<UUID> UUID) throws ApiException {
        ApiResponse<ApiResult<Object>> localVarResp = apiDosingParamSettingDeleteDosingParamSettingsPostWithHttpInfo(tenantId, UUID);
        return localVarResp.getData();
    }

    /**
     * 根据ID删除加药参数设置信息 Delete dosing parameter setting data by ids
     * 
     * @param tenantId  (optional)
     * @param UUID  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<Object>> apiDosingParamSettingDeleteDosingParamSettingsPostWithHttpInfo(String tenantId, List<UUID> UUID) throws ApiException {
        okhttp3.Call localVarCall = apiDosingParamSettingDeleteDosingParamSettingsPostValidateBeforeCall(tenantId, UUID, null);
        Type localVarReturnType = new TypeToken<ApiResult<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据ID删除加药参数设置信息 Delete dosing parameter setting data by ids (asynchronously)
     * 
     * @param tenantId  (optional)
     * @param UUID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDosingParamSettingDeleteDosingParamSettingsPostAsync(String tenantId, List<UUID> UUID, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDosingParamSettingDeleteDosingParamSettingsPostValidateBeforeCall(tenantId, UUID, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiDosingParamSettingGetAllDosingParamSettingsGet
     * @param tenantId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDosingParamSettingGetAllDosingParamSettingsGetCall(String tenantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/DosingParamSetting/GetAllDosingParamSettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDosingParamSettingGetAllDosingParamSettingsGetValidateBeforeCall(String tenantId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiDosingParamSettingGetAllDosingParamSettingsGetCall(tenantId, _callback);
        return localVarCall;

    }

    /**
     * 获取所有加药参数设置信息 Get all dosing parameter setting data
     * 
     * @param tenantId  (optional)
     * @return List&lt;DosingParamSettingDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResult<List<DosingParamSettingDto>>apiDosingParamSettingGetAllDosingParamSettingsGet(String tenantId) throws ApiException {
        ApiResponse<ApiResult<List<DosingParamSettingDto>>> localVarResp = apiDosingParamSettingGetAllDosingParamSettingsGetWithHttpInfo(tenantId);
        return localVarResp.getData();
    }

    /**
     * 获取所有加药参数设置信息 Get all dosing parameter setting data
     * 
     * @param tenantId  (optional)
     * @return ApiResponse&lt;List&lt;DosingParamSettingDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<List<DosingParamSettingDto>>> apiDosingParamSettingGetAllDosingParamSettingsGetWithHttpInfo(String tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiDosingParamSettingGetAllDosingParamSettingsGetValidateBeforeCall(tenantId, null);
        Type localVarReturnType = new TypeToken<ApiResult<List<DosingParamSettingDto>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取所有加药参数设置信息 Get all dosing parameter setting data (asynchronously)
     * 
     * @param tenantId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDosingParamSettingGetAllDosingParamSettingsGetAsync(String tenantId, final ApiCallback<List<DosingParamSettingDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDosingParamSettingGetAllDosingParamSettingsGetValidateBeforeCall(tenantId, _callback);
        Type localVarReturnType = new TypeToken<List<DosingParamSettingDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiDosingParamSettingGetDosingParamSettingsByCodeGet
     * @param codeEnum 代码 code (optional)
     * @param productionLine 工艺线代码 product line code (optional)
     * @param tenantId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDosingParamSettingGetDosingParamSettingsByCodeGetCall(Integer codeEnum, String productionLine, String tenantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/DosingParamSetting/GetDosingParamSettingsByCode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codeEnum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeEnum", codeEnum));
        }

        if (productionLine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productionLine", productionLine));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDosingParamSettingGetDosingParamSettingsByCodeGetValidateBeforeCall(Integer codeEnum, String productionLine, String tenantId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiDosingParamSettingGetDosingParamSettingsByCodeGetCall(codeEnum, productionLine, tenantId, _callback);
        return localVarCall;

    }

    /**
     * 通过代码和工艺线查询加药参数设置信息 Get dosing parameter setting data by code and product line
     * 
     * @param codeEnum 代码 code (optional)
     * @param productionLine 工艺线代码 product line code (optional)
     * @param tenantId  (optional)
     * @return List&lt;DosingParamSettingDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResult<List<DosingParamSettingDto>>apiDosingParamSettingGetDosingParamSettingsByCodeGet(Integer codeEnum, String productionLine, String tenantId) throws ApiException {
        ApiResponse<ApiResult<List<DosingParamSettingDto>>> localVarResp = apiDosingParamSettingGetDosingParamSettingsByCodeGetWithHttpInfo(codeEnum, productionLine, tenantId);
        return localVarResp.getData();
    }

    /**
     * 通过代码和工艺线查询加药参数设置信息 Get dosing parameter setting data by code and product line
     * 
     * @param codeEnum 代码 code (optional)
     * @param productionLine 工艺线代码 product line code (optional)
     * @param tenantId  (optional)
     * @return ApiResponse&lt;List&lt;DosingParamSettingDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<List<DosingParamSettingDto>>> apiDosingParamSettingGetDosingParamSettingsByCodeGetWithHttpInfo(Integer codeEnum, String productionLine, String tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiDosingParamSettingGetDosingParamSettingsByCodeGetValidateBeforeCall(codeEnum, productionLine, tenantId, null);
        Type localVarReturnType = new TypeToken<ApiResult<List<DosingParamSettingDto>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 通过代码和工艺线查询加药参数设置信息 Get dosing parameter setting data by code and product line (asynchronously)
     * 
     * @param codeEnum 代码 code (optional)
     * @param productionLine 工艺线代码 product line code (optional)
     * @param tenantId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDosingParamSettingGetDosingParamSettingsByCodeGetAsync(Integer codeEnum, String productionLine, String tenantId, final ApiCallback<List<DosingParamSettingDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDosingParamSettingGetDosingParamSettingsByCodeGetValidateBeforeCall(codeEnum, productionLine, tenantId, _callback);
        Type localVarReturnType = new TypeToken<List<DosingParamSettingDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiDosingParamSettingGetDosingParamSettingsByConditionGet
     * @param category 加药类型 dosage type (optional)
     * @param productionLine 生产线代码 product line code (optional)
     * @param tenantId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDosingParamSettingGetDosingParamSettingsByConditionGetCall(Integer category, String productionLine, String tenantId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/DosingParamSetting/GetDosingParamSettingsByCondition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (productionLine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productionLine", productionLine));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDosingParamSettingGetDosingParamSettingsByConditionGetValidateBeforeCall(Integer category, String productionLine, String tenantId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiDosingParamSettingGetDosingParamSettingsByConditionGetCall(category, productionLine, tenantId, _callback);
        return localVarCall;

    }

    /**
     * 通过条件查询加药参数设置信息 Get dosing parameter setting data by condition
     * 通过加药类型、工艺线查询加药参数设置信息 Get dosing parameter setting data by dosage type and product line code
     * @param category 加药类型 dosage type (optional)
     * @param productionLine 生产线代码 product line code (optional)
     * @param tenantId  (optional)
     * @return List&lt;DosingParamSettingDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResult<List<DosingParamSettingDto>>apiDosingParamSettingGetDosingParamSettingsByConditionGet(Integer category, String productionLine, String tenantId) throws ApiException {
        ApiResponse<ApiResult<List<DosingParamSettingDto>>> localVarResp = apiDosingParamSettingGetDosingParamSettingsByConditionGetWithHttpInfo(category, productionLine, tenantId);
        return localVarResp.getData();
    }

    /**
     * 通过条件查询加药参数设置信息 Get dosing parameter setting data by condition
     * 通过加药类型、工艺线查询加药参数设置信息 Get dosing parameter setting data by dosage type and product line code
     * @param category 加药类型 dosage type (optional)
     * @param productionLine 生产线代码 product line code (optional)
     * @param tenantId  (optional)
     * @return ApiResponse&lt;List&lt;DosingParamSettingDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<List<DosingParamSettingDto>>> apiDosingParamSettingGetDosingParamSettingsByConditionGetWithHttpInfo(Integer category, String productionLine, String tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiDosingParamSettingGetDosingParamSettingsByConditionGetValidateBeforeCall(category, productionLine, tenantId, null);
        Type localVarReturnType = new TypeToken<ApiResult<List<DosingParamSettingDto>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 通过条件查询加药参数设置信息 Get dosing parameter setting data by condition (asynchronously)
     * 通过加药类型、工艺线查询加药参数设置信息 Get dosing parameter setting data by dosage type and product line code
     * @param category 加药类型 dosage type (optional)
     * @param productionLine 生产线代码 product line code (optional)
     * @param tenantId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDosingParamSettingGetDosingParamSettingsByConditionGetAsync(Integer category, String productionLine, String tenantId, final ApiCallback<List<DosingParamSettingDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDosingParamSettingGetDosingParamSettingsByConditionGetValidateBeforeCall(category, productionLine, tenantId, _callback);
        Type localVarReturnType = new TypeToken<List<DosingParamSettingDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiDosingParamSettingUpdateDosingParamSettingsPost
     * @param tenantId  (optional)
     * @param dosingParamSettingDto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDosingParamSettingUpdateDosingParamSettingsPostCall(String tenantId, List<DosingParamSettingDto> dosingParamSettingDto, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = dosingParamSettingDto;

        // create path and map variables
        String localVarPath = "/api/DosingParamSetting/UpdateDosingParamSettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (tenantId != null) {
            localVarHeaderParams.put("tenantId", localVarApiClient.parameterToString(tenantId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDosingParamSettingUpdateDosingParamSettingsPostValidateBeforeCall(String tenantId, List<DosingParamSettingDto> dosingParamSettingDto, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiDosingParamSettingUpdateDosingParamSettingsPostCall(tenantId, dosingParamSettingDto, _callback);
        return localVarCall;

    }

    /**
     * 更新加药参数设置信息 Update dosing parameter setting data
     * 
     * @param tenantId  (optional)
     * @param dosingParamSettingDto  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResult<Object>apiDosingParamSettingUpdateDosingParamSettingsPost(String tenantId, List<DosingParamSettingDto> dosingParamSettingDto) throws ApiException {
        ApiResponse<ApiResult<Object>> localVarResp = apiDosingParamSettingUpdateDosingParamSettingsPostWithHttpInfo(tenantId, dosingParamSettingDto);
        return localVarResp.getData();
    }

    /**
     * 更新加药参数设置信息 Update dosing parameter setting data
     * 
     * @param tenantId  (optional)
     * @param dosingParamSettingDto  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResult<Object>> apiDosingParamSettingUpdateDosingParamSettingsPostWithHttpInfo(String tenantId, List<DosingParamSettingDto> dosingParamSettingDto) throws ApiException {
        okhttp3.Call localVarCall = apiDosingParamSettingUpdateDosingParamSettingsPostValidateBeforeCall(tenantId, dosingParamSettingDto, null);
        Type localVarReturnType = new TypeToken<ApiResult<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 更新加药参数设置信息 Update dosing parameter setting data (asynchronously)
     * 
     * @param tenantId  (optional)
     * @param dosingParamSettingDto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDosingParamSettingUpdateDosingParamSettingsPostAsync(String tenantId, List<DosingParamSettingDto> dosingParamSettingDto, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDosingParamSettingUpdateDosingParamSettingsPostValidateBeforeCall(tenantId, dosingParamSettingDto, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
