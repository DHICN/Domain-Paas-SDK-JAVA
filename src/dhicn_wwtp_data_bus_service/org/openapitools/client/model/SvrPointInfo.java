/*
 * 污水业务中台领域服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * SvrPointInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-09T14:11:26.479568400+08:00[Asia/Shanghai]")
public class SvrPointInfo {
  /**
   * Gets or Sets dataSource
   */
  @JsonAdapter(DataSourceEnum.Adapter.class)
  public enum DataSourceEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3);

    private Integer value;

    DataSourceEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataSourceEnum fromValue(Integer value) {
      for (DataSourceEnum b : DataSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataSourceEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return DataSourceEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DATA_SOURCE = "dataSource";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE)
  private DataSourceEnum dataSource;

  public static final String SERIALIZED_NAME_POINT_CODE = "pointCode";
  @SerializedName(SERIALIZED_NAME_POINT_CODE)
  private String pointCode;


  public SvrPointInfo dataSource(DataSourceEnum dataSource) {
    
    this.dataSource = dataSource;
    return this;
  }

   /**
   * Get dataSource
   * @return dataSource
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DataSourceEnum getDataSource() {
    return dataSource;
  }


  public void setDataSource(DataSourceEnum dataSource) {
    this.dataSource = dataSource;
  }


  public SvrPointInfo pointCode(String pointCode) {
    
    this.pointCode = pointCode;
    return this;
  }

   /**
   * Get pointCode
   * @return pointCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPointCode() {
    return pointCode;
  }


  public void setPointCode(String pointCode) {
    this.pointCode = pointCode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SvrPointInfo svrPointInfo = (SvrPointInfo) o;
    return Objects.equals(this.dataSource, svrPointInfo.dataSource) &&
        Objects.equals(this.pointCode, svrPointInfo.pointCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataSource, pointCode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SvrPointInfo {\n");
    sb.append("    dataSource: ").append(toIndentedString(dataSource)).append("\n");
    sb.append("    pointCode: ").append(toIndentedString(pointCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

