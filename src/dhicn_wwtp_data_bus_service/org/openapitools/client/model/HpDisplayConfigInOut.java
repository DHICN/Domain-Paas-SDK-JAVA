/*
 * 污水业务中台领域服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;

/**
 * HpDisplayConfigInOut
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-09T14:11:26.479568400+08:00[Asia/Shanghai]")
public class HpDisplayConfigInOut {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  /**
   * 显示类型枚举
   */
  @JsonAdapter(DisplayTypeEnum.Adapter.class)
  public enum DisplayTypeEnum {
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_7(7);

    private Integer value;

    DisplayTypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DisplayTypeEnum fromValue(Integer value) {
      for (DisplayTypeEnum b : DisplayTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DisplayTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DisplayTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DisplayTypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return DisplayTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DISPLAY_TYPE = "displayType";
  @SerializedName(SERIALIZED_NAME_DISPLAY_TYPE)
  private DisplayTypeEnum displayType;

  public static final String SERIALIZED_NAME_DISPLAY_TYPE_NAME = "displayTypeName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_TYPE_NAME)
  private String displayTypeName;

  public static final String SERIALIZED_NAME_DISPLAY_CODES = "displayCodes";
  @SerializedName(SERIALIZED_NAME_DISPLAY_CODES)
  private String displayCodes;

  public static final String SERIALIZED_NAME_SUB_TYPES = "subTypes";
  @SerializedName(SERIALIZED_NAME_SUB_TYPES)
  private String subTypes;

  public static final String SERIALIZED_NAME_IS_INPUT_POINT = "isInputPoint";
  @SerializedName(SERIALIZED_NAME_IS_INPUT_POINT)
  private Boolean isInputPoint;


  public HpDisplayConfigInOut id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * 配置ID config id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "配置ID config id")

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    this.id = id;
  }


  public HpDisplayConfigInOut displayType(DisplayTypeEnum displayType) {
    
    this.displayType = displayType;
    return this;
  }

   /**
   * 显示类型枚举
   * @return displayType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "显示类型枚举")

  public DisplayTypeEnum getDisplayType() {
    return displayType;
  }


  public void setDisplayType(DisplayTypeEnum displayType) {
    this.displayType = displayType;
  }


  public HpDisplayConfigInOut displayTypeName(String displayTypeName) {
    
    this.displayTypeName = displayTypeName;
    return this;
  }

   /**
   * 展示的模块名称 display type name
   * @return displayTypeName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "展示的模块名称 display type name")

  public String getDisplayTypeName() {
    return displayTypeName;
  }


  public void setDisplayTypeName(String displayTypeName) {
    this.displayTypeName = displayTypeName;
  }


  public HpDisplayConfigInOut displayCodes(String displayCodes) {
    
    this.displayCodes = displayCodes;
    return this;
  }

   /**
   * 要展示的点位编码，以英文逗号\&quot;,\&quot;隔开 system point codes, seperated by comma
   * @return displayCodes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "要展示的点位编码，以英文逗号\",\"隔开 system point codes, seperated by comma")

  public String getDisplayCodes() {
    return displayCodes;
  }


  public void setDisplayCodes(String displayCodes) {
    this.displayCodes = displayCodes;
  }


  public HpDisplayConfigInOut subTypes(String subTypes) {
    
    this.subTypes = subTypes;
    return this;
  }

   /**
   * 点位类型：如进水、出水、生化池…… point type
   * @return subTypes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "点位类型：如进水、出水、生化池…… point type")

  public String getSubTypes() {
    return subTypes;
  }


  public void setSubTypes(String subTypes) {
    this.subTypes = subTypes;
  }


  public HpDisplayConfigInOut isInputPoint(Boolean isInputPoint) {
    
    this.isInputPoint = isInputPoint;
    return this;
  }

   /**
   * 是否为输入点位 if it is an online point for input
   * @return isInputPoint
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "是否为输入点位 if it is an online point for input")

  public Boolean getIsInputPoint() {
    return isInputPoint;
  }


  public void setIsInputPoint(Boolean isInputPoint) {
    this.isInputPoint = isInputPoint;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HpDisplayConfigInOut hpDisplayConfigInOut = (HpDisplayConfigInOut) o;
    return Objects.equals(this.id, hpDisplayConfigInOut.id) &&
        Objects.equals(this.displayType, hpDisplayConfigInOut.displayType) &&
        Objects.equals(this.displayTypeName, hpDisplayConfigInOut.displayTypeName) &&
        Objects.equals(this.displayCodes, hpDisplayConfigInOut.displayCodes) &&
        Objects.equals(this.subTypes, hpDisplayConfigInOut.subTypes) &&
        Objects.equals(this.isInputPoint, hpDisplayConfigInOut.isInputPoint);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, displayType, displayTypeName, displayCodes, subTypes, isInputPoint);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HpDisplayConfigInOut {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    displayType: ").append(toIndentedString(displayType)).append("\n");
    sb.append("    displayTypeName: ").append(toIndentedString(displayTypeName)).append("\n");
    sb.append("    displayCodes: ").append(toIndentedString(displayCodes)).append("\n");
    sb.append("    subTypes: ").append(toIndentedString(subTypes)).append("\n");
    sb.append("    isInputPoint: ").append(toIndentedString(isInputPoint)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

